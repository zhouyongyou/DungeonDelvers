// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title DungeonCore (核心註冊中心)
 * @author Your Team Name
 *
 * @notice
 * 這是整個系統的中樞神經 (Hub)。它的唯一職責就是作為一個可信的地址註冊表。
 * - 【極簡化】: 此合約不包含任何複雜的業務邏輯。邏輯越少，潛在的漏洞就越少。
 * - 【可升級性】: Owner 可以透過 set... 函式，安全地更新系統中任何一個模組的合約地址，實現單一模組的升級或修復，而無需重新部署整個系統。
 * - 【單一信任點】: 系統中所有其他合約都從 DungeonCore 獲取所需模組的地址，確保了地址的統一和權威性。
 */
contract DungeonCore is Ownable {
    
    // --- 模組合約地址註冊表 ---
    address public oracle;
    address public playerVault;
    address public dungeonMaster;
    address public heroContract;
    address public relicContract;
    address public partyContract;
    address public playerProfileContract;
    address public vipStakingContract;
    address public altarOfAscension;

    // --- 全局設定 ---
    address public usdToken; // 假設的穩定幣地址

    // --- 事件 ---
    event ModuleAddressUpdated(bytes32 indexed moduleName, address indexed newAddress);
    event UsdTokenUpdated(address indexed newAddress);

    constructor(address initialOwner) Ownable(initialOwner) {
        // 在建構時，Owner 被設為部署者或指定的多簽錢包。
        // 所有模組地址初始為零，需要在部署後由 Owner 逐一設定。
    }

    // --- Owner 管理函式 ---
    // 每個 set 函式都應該遵循 檢查 -> 執行 -> 發射事件 的模式

    function setOracle(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        oracle = _newAddress;
        emit ModuleAddressUpdated("Oracle", _newAddress);
    }

    function setPlayerVault(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        playerVault = _newAddress;
        emit ModuleAddressUpdated("PlayerVault", _newAddress);
    }

    function setDungeonMaster(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        dungeonMaster = _newAddress;
        emit ModuleAddressUpdated("DungeonMaster", _newAddress);
    }

    function setHeroContract(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        heroContract = _newAddress;
        emit ModuleAddressUpdated("HeroContract", _newAddress);
    }

    function setRelicContract(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        relicContract = _newAddress;
        emit ModuleAddressUpdated("RelicContract", _newAddress);
    }

    function setPartyContract(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        partyContract = _newAddress;
        emit ModuleAddressUpdated("PartyContract", _newAddress);
    }

    function setPlayerProfileContract(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        playerProfileContract = _newAddress;
        emit ModuleAddressUpdated("PlayerProfileContract", _newAddress);
    }

    function setVipStakingContract(address _newAddress) external onlyOwner {
        // 允許為零地址，代表暫時禁用 VIP 系統
        vipStakingContract = _newAddress;
        emit ModuleAddressUpdated("VipStakingContract", _newAddress);
    }

    function setAltarOfAscension(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        altarOfAscension = _newAddress;
        emit ModuleAddressUpdated("AltarOfAscension", _newAddress);
    }

    function setUsdToken(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Core: Zero address");
        usdToken = _newAddress;
        emit UsdTokenUpdated(_newAddress);
    }
}
