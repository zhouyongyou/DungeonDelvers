// src/components/marketplace/PurchaseModalV2.tsx
// V2 Ë≥ºË≤∑Á¢∫Ë™çÊ®°ÊÖãÊ°ÜÁµÑ‰ª∂ - ÊîØÊåÅÂ§öÂπ£Á®Æ‰ªòÊ¨æ

import React, { useState, useMemo } from 'react';
import { useAccount } from 'wagmi';
import { formatUnits, parseUnits } from 'viem';
import { ActionButton } from '../ui/ActionButton';
import { Icons } from '../ui/icons';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { useAppToast } from '../../contexts/SimpleToastContext';
import { 
    useMarketplaceV2,
    SUPPORTED_STABLECOINS,
    type StablecoinSymbol 
} from '../../hooks/useMarketplaceV2Contract';
import { useHeroPower, usePartyPower, useHeroDetails, useRelicDetails, usePartyDetails, getElementName, getClassName, getRelicCategoryName } from '../../hooks/useNftPower';
import { StablecoinSelector } from './StablecoinSelector';
import type { HeroNft, RelicNft, PartyNft, NftType } from '../../types/nft';

// Define MarketListingV2 type
export interface MarketListingV2 {
    id: string;
    seller: string;
    nftType: NftType;
    tokenId: string;
    price: string;
    acceptedTokens: string[]; // Array of token addresses
    status: 'active' | 'sold' | 'cancelled';
    createdAt: string;
    nft: HeroNft | RelicNft | PartyNft;
}

interface PurchaseModalV2Props {
    isOpen: boolean;
    onClose: () => void;
    listing: MarketListingV2 | null;
    onPurchaseComplete?: () => void;
}

export const PurchaseModalV2: React.FC<PurchaseModalV2Props> = ({
    isOpen,
    onClose,
    listing,
    onPurchaseComplete
}) => {
    const { address } = useAccount();
    const { showToast } = useAppToast();
    const {
        purchaseNFT,
        approveToken,
        checkTokenAllowance,
        isProcessing
    } = useMarketplaceV2();
    
    const [selectedPaymentToken, setSelectedPaymentToken] = useState<StablecoinSymbol>('USDT');
    const [confirmPurchase, setConfirmPurchase] = useState(false);
    const [needsApproval, setNeedsApproval] = useState(false);
    
    // Áç≤Âèñ NFT Êà∞ÂäõÂíåË©≥Á¥∞Ë≥áË®ä
    const heroPower = useHeroPower(listing?.nftType === 'hero' ? BigInt(listing.tokenId) : 0n);
    const partyPower = usePartyPower(listing?.nftType === 'party' ? BigInt(listing.tokenId) : 0n);
    const heroDetails = useHeroDetails(listing?.nftType === 'hero' ? BigInt(listing.tokenId) : 0n);
    const relicDetails = useRelicDetails(listing?.nftType === 'relic' ? BigInt(listing.tokenId) : 0n);
    const partyDetails = usePartyDetails(listing?.nftType === 'party' ? BigInt(listing.tokenId) : 0n);
    
    // Áç≤ÂèñÂèØÁî®ÁöÑ‰ªòÊ¨æ‰ª£Âπ£ÔºàÂÉÖÈ°ØÁ§∫Ë≥£ÂÆ∂Êé•ÂèóÁöÑ‰ª£Âπ£Ôºâ
    const availablePaymentTokens = useMemo(() => {
        if (!listing) return [];
        // Convert token addresses to symbols
        return Object.entries(SUPPORTED_STABLECOINS)
            .filter(([_, tokenInfo]) => listing.acceptedTokens.includes(tokenInfo.address))
            .map(([symbol, _]) => symbol as StablecoinSymbol);
    }, [listing]);
    
    // Ê™¢Êü•ÈÅ∏‰∏≠‰ªòÊ¨æ‰ª£Âπ£ÁöÑÊéàÊ¨äÁãÄÊÖã
    const checkApprovalStatus = async (token: StablecoinSymbol) => {
        if (!listing || !address) return;
        
        try {
            const tokenInfo = SUPPORTED_STABLECOINS[token];
            const allowance = await checkTokenAllowance(
                tokenInfo.address as `0x${string}`, 
                address as `0x${string}`,
                '0xCd2Dc43ddB5f628f98CDAA273bd74605cBDF21F8' // DUNGEONMARKETPLACE_V2 address
            );
            const requiredAmount = parseUnits(listing.price.toString(), 18);
            setNeedsApproval(allowance < requiredAmount);
        } catch (error) {
            console.error('Error checking approval:', error);
            setNeedsApproval(true);
        }
    };
    
    // Áï∂ÈÅ∏Êìá‰ªòÊ¨æ‰ª£Âπ£ÊôÇÊ™¢Êü•ÊéàÊ¨ä
    const handleTokenSelect = (token: StablecoinSymbol) => {
        setSelectedPaymentToken(token);
        checkApprovalStatus(token);
    };
    
    // ÂàùÂßãÂåñÊôÇË®≠ÁΩÆÈªòË™ç‰ªòÊ¨æ‰ª£Âπ£
    React.useEffect(() => {
        if (availablePaymentTokens.length > 0 && !availablePaymentTokens.includes(selectedPaymentToken)) {
            const defaultToken = availablePaymentTokens[0];
            setSelectedPaymentToken(defaultToken);
            checkApprovalStatus(defaultToken);
        }
    }, [availablePaymentTokens, selectedPaymentToken]);
    
    const handlePurchase = async () => {
        if (!listing) return;
        
        try {
            // Â¶ÇÊûúÈúÄË¶ÅÊéàÊ¨äÔºåÂÖàÈÄ≤Ë°åÊéàÊ¨ä
            if (needsApproval) {
                const tokenInfo = SUPPORTED_STABLECOINS[selectedPaymentToken];
                const requiredAmount = parseUnits(listing.price.toString(), 18);
                
                showToast('Ê≠£Âú®ÊéàÊ¨ä‰ª£Âπ£...', 'info');
                const approved = await approveToken(tokenInfo.address as `0x${string}`, requiredAmount);
                if (!approved) {
                    throw new Error('‰ª£Âπ£ÊéàÊ¨äÂ§±Êïó');
                }
                setNeedsApproval(false);
            }
            
            const success = await purchaseNFT(
                listing.id,
                listing.price,
                selectedPaymentToken
            );
            
            if (!success) {
                throw new Error('Ë≥ºË≤∑‰∫§ÊòìÂ§±Êïó');
            }
            showToast('Ë≥ºË≤∑ÊàêÂäüÔºÅNFT Â∑≤ËΩâÁßªÂà∞ÊÇ®ÁöÑÈå¢ÂåÖ', 'success');
            onClose();
            onPurchaseComplete?.();
            setConfirmPurchase(false);
        } catch (error) {
            showToast(`Ë≥ºË≤∑Â§±Êïó: ${error}`, 'error');
        }
    };
    
    if (!isOpen || !listing) return null;
    
    const nftTypeLabel = listing.nftType === 'hero' ? 'Ëã±ÈõÑ' :
                        listing.nftType === 'relic' ? 'ËÅñÁâ©' : 'Èöä‰ºç';
                        
    // Áç≤ÂèñÊà∞ÂäõÂÄº
    const getPowerValue = () => {
        if (listing.nftType === 'hero' && heroPower.power) return heroPower.power;
        if (listing.nftType === 'party' && partyPower.power) return partyPower.power;
        return null;
    };
    
    const powerValue = getPowerValue();
    const selectedTokenInfo = SUPPORTED_STABLECOINS[selectedPaymentToken];
    
    return (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 rounded-lg p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-bold text-white">Á¢∫Ë™çË≥ºË≤∑</h2>
                    <button
                        onClick={onClose}
                        disabled={isPurchasing || isApproving}
                        className="text-gray-400 hover:text-white"
                    >
                        <Icons.X className="h-6 w-6" />
                    </button>
                </div>
                
                {/* NFT È†êË¶Ω */}
                <div className="mb-6 p-4 bg-gray-700 rounded-lg">
                    <div className="flex items-center gap-4">
                        <div className="w-16 h-16 bg-gray-900 rounded-lg flex items-center justify-center text-2xl relative">
                            {listing.nftType === 'hero' ? '‚öîÔ∏è' :
                             listing.nftType === 'relic' ? 'üõ°Ô∏è' : 'üë•'}
                            {/* Êà∞ÂäõËßíÊ®ô */}
                            {powerValue && (
                                <div className="absolute -top-1 -right-1 bg-[#C0A573] text-white text-xs px-1 py-0.5 rounded-full font-bold min-w-[20px] text-center">
                                    {powerValue > 999 ? `${Math.floor(powerValue/1000)}k` : powerValue}
                                </div>
                            )}
                        </div>
                        <div className="flex-1">
                            <h3 className="font-bold text-white">
                                {nftTypeLabel} #{listing.tokenId.toString()}
                            </h3>
                            {powerValue && (
                                <p className="text-sm text-[#C0A573] font-bold">
                                    Êà∞Âäõ: {powerValue.toLocaleString()}
                                </p>
                            )}
                            <p className="text-sm text-gray-400">
                                ÂêàÁ¥Ñ: {listing.contractAddress.slice(0, 8)}...{listing.contractAddress.slice(-6)}
                            </p>
                            <p className="text-sm text-gray-400">
                                Ë≥£ÂÆ∂: {listing.seller.slice(0, 8)}...{listing.seller.slice(-6)}
                            </p>
                        </div>
                    </div>
                    
                    {/* NFT Ë©≥Á¥∞Ë≥áË®ä */}
                    {listing.nftType === 'hero' && heroDetails.details && (
                        <div className="mt-3 pt-3 border-t border-gray-600">
                            <div className="grid grid-cols-2 gap-2 text-xs">
                                <div className="flex justify-between">
                                    <span className="text-gray-400">Á≠âÁ¥ö:</span>
                                    <span className="text-white">Lv.{heroDetails.details.level}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-400">ÂìÅÈöé:</span>
                                    <span className="text-white">T{heroDetails.details.tier}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-400">ËÅ∑Ê•≠:</span>
                                    <span className="text-white">{getClassName(heroDetails.details.heroClass)}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-400">ÂÖÉÁ¥†:</span>
                                    <span className="text-white">{getElementName(heroDetails.details.element)}</span>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {listing.nftType === 'relic' && relicDetails.details && (
                        <div className="mt-3 pt-3 border-t border-gray-600">
                            <div className="grid grid-cols-2 gap-2 text-xs">
                                <div className="flex justify-between">
                                    <span className="text-gray-400">È°ûÂà•:</span>
                                    <span className="text-white">{getRelicCategoryName(relicDetails.details.category)}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-400">ÂìÅÈöé:</span>
                                    <span className="text-white">T{relicDetails.details.tier}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-400">ÂÆπÈáè:</span>
                                    <span className="text-white">{relicDetails.details.capacity}</span>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {listing.nftType === 'party' && partyDetails.details && (
                        <div className="mt-3 pt-3 border-t border-gray-600">
                            <div className="grid grid-cols-2 gap-2 text-xs">
                                <div className="flex justify-between">
                                    <span className="text-gray-400">Ëã±ÈõÑÊï∏Èáè:</span>
                                    <span className="text-white">{partyDetails.details.heroes.length}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-400">ËÅñÁâ©Êï∏Èáè:</span>
                                    <span className="text-white">{partyDetails.details.relics.length}</span>
                                </div>
                                <div className="flex justify-between col-span-2">
                                    <span className="text-gray-400">Á∏ΩÊà∞Âäõ:</span>
                                    <span className="text-[#C0A573] font-bold">{partyDetails.details.totalPower.toLocaleString()}</span>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
                
                {/* ÂÉπÊ†º‰ø°ÊÅØ */}
                <div className="mb-4 p-3 bg-gray-700 rounded">
                    <div className="flex justify-between items-center">
                        <span className="text-gray-400">Ë≥ºË≤∑ÂÉπÊ†º</span>
                        <span className="text-[#C0A573] font-bold text-lg">
                            ${listing.price.toFixed(2)} USD
                        </span>
                    </div>
                </div>
                
                {/* ‰ªòÊ¨æ‰ª£Âπ£ÈÅ∏Êìá */}
                <div className="mb-4">
                    <label className="block text-gray-400 mb-2">ÈÅ∏Êìá‰ªòÊ¨æ‰ª£Âπ£</label>
                    <StablecoinSelector
                        selectedTokens={[selectedPaymentToken]}
                        onToggle={handleTokenSelect}
                        mode="single"
                        address={address}
                    />
                </div>
                
                {/* ÊéàÊ¨äÁãÄÊÖãÊèêÁ§∫ */}
                {needsApproval && (
                    <div className="mb-4 p-3 bg-yellow-900/30 border border-yellow-700 rounded-lg">
                        <div className="flex items-center gap-2 text-yellow-400 text-sm">
                            <Icons.AlertTriangle className="h-4 w-4" />
                            ÈúÄË¶ÅÊéàÊ¨ä {selectedTokenInfo.symbol} ‰ª£Âπ£ÊâçËÉΩÂÆåÊàêË≥ºË≤∑
                        </div>
                    </div>
                )}
                
                {/* ‰∫§ÊòìÊëòË¶Å */}
                <div className="mb-4 p-3 bg-gray-700 rounded space-y-2">
                    <h3 className="text-white font-medium mb-2">‰∫§ÊòìÊëòË¶Å</h3>
                    <div className="flex justify-between text-sm">
                        <span className="text-gray-400">NFT ÂÉπÊ†º:</span>
                        <span className="text-white">${listing.price.toFixed(2)} USD</span>
                    </div>
                    <div className="flex justify-between text-sm">
                        <span className="text-gray-400">‰ªòÊ¨æ‰ª£Âπ£:</span>
                        <span className="text-white flex items-center gap-1">
                            <span>{selectedTokenInfo.icon}</span>
                            {selectedTokenInfo.symbol}
                        </span>
                    </div>
                    <div className="flex justify-between text-sm">
                        <span className="text-gray-400">ÈúÄË¶ÅÊîØ‰ªò:</span>
                        <span className="text-[#C0A573] font-bold">
                            {listing.price.toFixed(2)} {selectedTokenInfo.symbol}
                        </span>
                    </div>
                </div>
                
                {/* Á¢∫Ë™çÂãæÈÅ∏ */}
                <div className="mb-4">
                    <label className="flex items-center gap-2 cursor-pointer">
                        <input
                            type="checkbox"
                            checked={confirmPurchase}
                            onChange={(e) => setConfirmPurchase(e.target.checked)}
                            className="w-4 h-4 text-[#C0A573] bg-gray-700 border-gray-600 rounded focus:ring-[#C0A573]"
                            disabled={isPurchasing || isApproving}
                        />
                        <span className="text-sm text-gray-300">
                            ÊàëÁ¢∫Ë™çË¶ÅË≥ºË≤∑Ê≠§ NFTÔºå‰∏¶‰∫ÜËß£‰∫§ÊòìÂÆåÊàêÂæå‰∏çÂèØÊí§Èä∑
                        </span>
                    </label>
                </div>
                
                {/* Êìç‰ΩúÊåâÈàï */}
                <div className="flex gap-2">
                    <ActionButton
                        onClick={handlePurchase}
                        disabled={!confirmPurchase || isPurchasing || isApproving}
                        isLoading={isPurchasing || isApproving}
                        className="flex-1 py-2"
                    >
                        {isApproving ? 'ÊéàÊ¨ä‰∏≠...' :
                         isPurchasing ? 'Ë≥ºË≤∑‰∏≠...' :
                         needsApproval ? `ÊéàÊ¨ä‰∏¶Ë≥ºË≤∑ $${listing.price.toFixed(2)}` :
                         `Á¢∫Ë™çË≥ºË≤∑ $${listing.price.toFixed(2)}`}
                    </ActionButton>
                    <ActionButton
                        onClick={onClose}
                        disabled={isPurchasing || isApproving}
                        className="px-6 py-2 bg-gray-700 hover:bg-gray-600"
                    >
                        ÂèñÊ∂à
                    </ActionButton>
                </div>
                
                {/* ÂÆâÂÖ®ÊèêÁ§∫ */}
                <div className="mt-4 p-3 bg-blue-900/30 border border-blue-700 rounded-lg">
                    <div className="flex items-start gap-2 text-blue-400 text-xs">
                        <Icons.Info className="h-4 w-4 mt-0.5 flex-shrink-0" />
                        <div>
                            <p className="font-medium mb-1">ÂÆâÂÖ®ÊèêÁ§∫Ôºö</p>
                            <ul className="space-y-1 text-blue-300">
                                <li>‚Ä¢ Ë´ãÁ¢∫Ë™ç NFT ‰ø°ÊÅØÂíå‰ªòÊ¨æ‰ª£Âπ£Ê≠£Á¢∫ÁÑ°Ë™§</li>
                                <li>‚Ä¢ ‰∫§ÊòìÂÆåÊàêÂæå NFT Â∞áÁ´ãÂç≥ËΩâÁßªÂà∞ÊÇ®ÁöÑÈå¢ÂåÖ</li>
                                <li>‚Ä¢ ÊâãÁ∫åË≤ªÂ∞áËá™ÂãïÊâ£Èô§‰∏¶ËΩâÂÖ•Âπ≥Âè∞Èå¢ÂåÖ</li>
                                <li>‚Ä¢ Ë´ãÁ¢∫‰øùÁ∂≤Áµ°Á©©ÂÆöÔºåÈÅøÂÖç‰∫§ÊòìÂ§±Êïó</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};