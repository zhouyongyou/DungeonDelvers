// V25 Contract Configuration with ABI
// Generated on 2025-08-05T18:12:30.720Znc-all.js to update

import HeroArtifact from '../abis/Hero.json';
import RelicArtifact from '../abis/Relic.json';
import PartyArtifact from '../abis/Party.json';
import DungeonCoreArtifact from '../abis/DungeonCore.json';
import DungeonMasterArtifact from '../abis/DungeonMaster.json';
import PlayerProfileArtifact from '../abis/PlayerProfile.json';
import VIPStakingArtifact from '../abis/VIPStaking.json';
import OracleArtifact from '../abis/Oracle.json';
import AltarOfAscensionArtifact from '../abis/AltarOfAscension.json';
import PlayerVaultArtifact from '../abis/PlayerVault.json';
import DungeonStorageArtifact from '../abis/DungeonStorage.json';
import SoulShardTokenArtifact from '../abis/SoulShardToken.json';

// Extract ABI from artifacts
const HeroABI = HeroArtifact.abi || HeroArtifact;
const RelicABI = RelicArtifact.abi || RelicArtifact;
const PartyABI = PartyArtifact.abi || PartyArtifact;
const DungeonCoreABI = DungeonCoreArtifact.abi || DungeonCoreArtifact;
const DungeonMasterABI = DungeonMasterArtifact.abi || DungeonMasterArtifact;
const PlayerProfileABI = PlayerProfileArtifact.abi || PlayerProfileArtifact;
const VIPStakingABI = VIPStakingArtifact.abi || VIPStakingArtifact;
const OracleABI = OracleArtifact.abi || OracleArtifact;
const AltarOfAscensionABI = AltarOfAscensionArtifact.abi || AltarOfAscensionArtifact;
const PlayerVaultABI = PlayerVaultArtifact.abi || PlayerVaultArtifact;
const DungeonStorageABI = DungeonStorageArtifact.abi || DungeonStorageArtifact;
const SoulShardTokenABI = SoulShardTokenArtifact.abi || SoulShardTokenArtifact;

export interface ContractWithABI {
  address: string;
  abi: any;
}

export const CONTRACTS_WITH_ABI = {
  56: { // BSC Mainnet
    // NFT Contracts
    HERO: {
      address: '0x6DEb5Ade2F6BEe8294A4b7f37cE372152109E2db',
      abi: HeroABI
    },
    RELIC: {
      address: '0xcfB83d8545D68b796a236290b3C1bc7e4A140B11',
      abi: RelicABI
    },
    PARTY: {
      address: '0x18bF1eE489CD0D8bfb006b4110bfe0Bb7459bE69',
      abi: PartyABI
    },
    
    // Core Contracts
    DUNGEONCORE: {
      address: '0x1a959ACcb898AdD61C959f2C93Abe502D0e1D34a',
      abi: DungeonCoreABI
    },
    DUNGEONMASTER: {
      address: '0xd06470d4C6F62F6747cf02bD2b2De0981489034F',
      abi: DungeonMasterABI
    },
    PLAYERPROFILE: {
      address: '0x0f5932e89908400a5AfDC306899A2987b67a3155',
      abi: PlayerProfileABI
    },
    VIPSTAKING: {
      address: '0xC0D8C84e28E5BcfC9cBD109551De53BA04e7328C',
      abi: VIPStakingABI
    },
    ORACLE: {
      address: '0xf8CE896aF39f95a9d5Dd688c35d381062263E25a',
      abi: OracleABI
    },
    ALTAROFASCENSION: {
      address: '0xE043ef6Ce183C218F8f9d9a144eD4A06cF379686',
      abi: AltarOfAscensionABI
    },
    PLAYERVAULT: {
      address: '0x62Bce9aF5E2C47b13f62A2e0fCB1f9C7AfaF8787',
      abi: PlayerVaultABI
    },
    DUNGEONSTORAGE: {
      address: '0x1Fd33E7883FdAC36a49f497440a4E2e95C6fcC77',
      abi: DungeonStorageABI
    },
    
    // Token Contracts
    SOULSHARD: {
      address: '0x97B2C2a9A11C7b6A020b4bAEaAd349865eaD0bcF',
      abi: SoulShardTokenABI
    },
    
    // Additional Addresses (from master-config.json)
    USD: {
      address: '0x7C67Af4EBC6651c95dF78De11cfe325660d935FE',
      abi: [] // USD Token ABI if needed
    },
    UNISWAP_POOL: {
      address: '0x1e5Cd5F386Fb6F39cD8788675dd3A5ceB6521C82',
      abi: [] // Uniswap V3 Pool ABI if needed
    },
    DUNGEONMASTERWALLET: {
      address: '0x10925A7138649C7E1794CE646182eeb5BF8ba647',
      abi: [] // This is a wallet address, not a contract
    }
  }
} as const;

// Contract version for tracking
export const CONTRACT_VERSION = 'V25';

// Helper function to get contract with ABI - supports both signatures
export function getContractWithABI(name: keyof typeof CONTRACTS_WITH_ABI[56]): ContractWithABI;
export function getContractWithABI(chainId: number, name: string): ContractWithABI | undefined;
export function getContractWithABI(
  nameOrChainId: keyof typeof CONTRACTS_WITH_ABI[56] | number,
  nameIfChainId?: string
): ContractWithABI | undefined {
  // Support old signature: getContractWithABI(name)
  if (typeof nameOrChainId === 'string') {
    return CONTRACTS_WITH_ABI[56][nameOrChainId];
  }
  
  // Support new signature: getContractWithABI(chainId, name)
  const chainId = nameOrChainId as number;
  const name = nameIfChainId!;
  
  // Convert contract name to uppercase to match the keys
  const upperName = name.toUpperCase();
  
  // Check if chainId exists in CONTRACTS_WITH_ABI
  if (!(chainId in CONTRACTS_WITH_ABI)) {
    console.warn(`Chain ID ${chainId} not found in CONTRACTS_WITH_ABI`);
    return undefined;
  }
  
  const chainContracts = CONTRACTS_WITH_ABI[chainId as keyof typeof CONTRACTS_WITH_ABI];
  
  // Check if contract exists for this chain
  if (!(upperName in chainContracts)) {
    console.warn(`Contract ${name} (${upperName}) not found for chain ${chainId}`);
    return undefined;
  }
  
  return chainContracts[upperName as keyof typeof chainContracts];
}

/**
 * @deprecated Use getContractWithABI() instead. This function only returns the address.
 * Legacy compatibility function - will be removed in future versions.
 */
export const getContract = (name: keyof typeof CONTRACTS_WITH_ABI[56]): string => {
  console.warn(`⚠️ getContract('${name}') is deprecated. Use getContractWithABI('${name}') instead.`);
  return CONTRACTS_WITH_ABI[56][name].address;
};

// Export contract info for debugging
export const CONTRACT_INFO = {
  version: CONTRACT_VERSION,
  network: "BSC Mainnet",
  deploymentBlock: 56184733,
  lastUpdated: "2025-08-05T17:45:54.340Z"
};
