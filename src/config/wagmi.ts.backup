import { createConfig, http } from 'wagmi';
import { bsc, bscTestnet, hardhat } from 'wagmi/chains';
import { coinbaseWallet, injected, walletConnect } from 'wagmi/connectors';
import { createSmartRpcTransport } from './smartRpcTransport';
import { logger } from '../utils/logger';

// 判斷是否為寫入操作（需要簽名的交易）
function isWriteOperation(method: string): boolean {
  const writeMethods = [
    'eth_sendTransaction',
    'eth_sendRawTransaction',
    'eth_sign',
    'eth_signTransaction',
    'eth_signTypedData',
    'eth_signTypedData_v3',
    'eth_signTypedData_v4',
    'personal_sign'
  ];
  return writeMethods.includes(method);
}

// 創建混合 RPC transport
function createHybridTransport() {
  // 獲取我們的查詢用 transport
  const queryTransport = createSmartRpcTransport();
  
  // 返回一個混合 transport
  return (config: any) => {
    return {
      ...http()(config),
      request: async ({ method, params }: any) => {
        // 如果是寫入操作或 gas 估算，使用用戶的 MetaMask RPC
        if (isWriteOperation(method) || method === 'eth_estimateGas' || method === 'eth_gasPrice') {
          logger.info(`🦊 使用 MetaMask RPC: ${method}`);
          
          // 直接使用 window.ethereum
          if (window.ethereum && window.ethereum.request) {
            try {
              return await window.ethereum.request({ method, params });
            } catch (error) {
              logger.error('MetaMask RPC 錯誤:', error);
              throw error;
            }
          } else {
            throw new Error('MetaMask not available');
          }
        }
        
        // 其他查詢操作使用我們的 RPC
        logger.debug(`🔍 使用查詢 RPC: ${method}`);
        return queryTransport(config).request({ method, params });
      }
    };
  };
}

// 獲取支持的鏈
function getSupportedChains() {
  const isDevelopment = import.meta.env.DEV;
  
  if (isDevelopment) {
    return [bsc, bscTestnet, hardhat] as const;
  }
  
  return [bsc] as const;
}

// 創建 transports 配置
function createTransports() {
  const isDevelopment = import.meta.env.DEV;
  const hybridTransport = createHybridTransport();
  
  const transports: any = {
    [bsc.id]: hybridTransport,
  };
  
  if (isDevelopment) {
    transports[bscTestnet.id] = hybridTransport;
    transports[hardhat.id] = http();
  }
  
  return transports;
}

// WalletConnect projectId
const walletConnectProjectId = import.meta.env.VITE_WALLET_CONNECT_PROJECT_ID || '';

if (!walletConnectProjectId) {
  logger.warn('⚠️ WalletConnect Project ID 未設置');
}

// 創建 wagmi 配置
export const config = createConfig({
  chains: getSupportedChains(),
  transports: createTransports(),
  connectors: [
    injected({
      shimDisconnect: true,
      target() {
        return {
          id: 'metaMask',
          name: 'MetaMask',
          provider: window.ethereum,
        };
      },
    }),
    walletConnect({
      projectId: walletConnectProjectId,
      showQrModal: true,
      qrModalOptions: {
        themeMode: 'dark',
      },
    }),
    coinbaseWallet({
      appName: 'Dungeon Delvers',
      darkMode: true,
    }),
  ],
  ssr: false,
});

// 導出鏈配置
export const supportedChains = getSupportedChains();
export const defaultChain = bsc;

// 類型聲明
declare global {
  interface Window {
    ethereum?: any;
  }
}