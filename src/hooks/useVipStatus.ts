// src/hooks/useVipStatus.ts (‰øÆÊ≠£Âæå)

import { useAccount, useReadContract, useBalance, useReadContracts } from 'wagmi';
import { useMonitoredReadContracts } from './useMonitoredContract';
import { useMemo, useEffect } from 'react';
import { bsc } from 'wagmi/chains';
import { getContract } from '../config/contracts';
import { useCountdown } from './useCountdown';
import { logger } from '../utils/logger';

// Ê†ºÂºèÂåñÂÜ∑ÂçªÊúüÁöÑËºîÂä©ÂáΩÊï∏
const formatCooldownPeriod = (cooldownPeriod: any): string => {
    if (!cooldownPeriod) return '7 Â§©';
    
    const seconds = Number(cooldownPeriod);
    
    if (seconds < 60) {
        return `${seconds} Áßí`;
    } else if (seconds < 3600) {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return remainingSeconds > 0 ? `${minutes} ÂàÜ ${remainingSeconds} Áßí` : `${minutes} ÂàÜÈêò`;
    } else if (seconds < 86400) {
        const hours = Math.floor(seconds / 3600);
        const remainingMinutes = Math.floor((seconds % 3600) / 60);
        return remainingMinutes > 0 ? `${hours} Â∞èÊôÇ ${remainingMinutes} ÂàÜÈêò` : `${hours} Â∞èÊôÇ`;
    } else {
        const days = Math.floor(seconds / 86400);
        const remainingHours = Math.floor((seconds % 86400) / 3600);
        return remainingHours > 0 ? `${days} Â§© ${remainingHours} Â∞èÊôÇ` : `${days} Â§©`;
    }
};

/**
 * @notice Â∞àÈñÄÁî®ÊñºÁç≤ÂèñÂíåÁÆ°ÁêÜ VIP È†ÅÈù¢ÊâÄÊúâÁãÄÊÖãÁöÑËá™ÂÆöÁæ© Hook„ÄÇ
 * @dev Â∞ÅË£ù‰∫ÜÊâÄÊúâËàá VIP ÂêàÁ¥ÑÁöÑ‰∫íÂãï„ÄÅÊï∏ÊìöËÆÄÂèñÂíåÁãÄÊÖãË®àÁÆóÔºå‰Ωø VipPage ÂÖÉ‰ª∂Êõ¥Á∞°ÊΩî„ÄÇ
 */
export const useVipStatus = () => {
    const { address, chainId } = useAccount();

    const isSupportedChain = chainId === bsc.id;

    const vipStakingContract = useMemo(() => {
        if (!isSupportedChain) return null;
        const contract = getContract(chainId, 'vipStaking');

        return contract;
    }, [chainId, isSupportedChain]);
    
    const soulShardContract = useMemo(() => isSupportedChain ? getContract(chainId, 'soulShard') : null, [chainId, isSupportedChain]);
    const oracleContract = useMemo(() => isSupportedChain ? getContract(chainId, 'oracle') : null, [chainId, isSupportedChain]);

    // ËÆÄÂèñÈèà‰∏äÊï∏Êìö
    const { data: soulShardBalance, isLoading: isLoadingBalance, refetch: refetchBalance } = useBalance({ 
        address, 
        token: soulShardContract?.address, 
        query: { 
            enabled: !!address && !!soulShardContract,
            // üîÑ È§òÈ°çÊü•Ë©¢Âø´ÂèñÈÖçÁΩÆ
            staleTime: 1000 * 60 * 2, // 2ÂàÜÈêò - È§òÈ°çÈúÄË¶ÅËºÉÊñ∞ÁöÑÊï∏Êìö
            gcTime: 1000 * 60 * 10,   // 10ÂàÜÈêò
            refetchOnWindowFocus: false,
            retry: 2,
        }
    });
    
    // ‚òÖ Ê†∏ÂøÉ‰øÆÊ≠£ #1: ‰ΩøÁî®ÂêàÁ¥ÑÊñπÊ≥ïÁç≤Âèñ VIP Á≠âÁ¥öÂíåÁ®ÖÁéáÊ∏õÂÖçÔºàÂ¢ûÂº∑ÈåØË™§ËôïÁêÜÔºâ
    const { data: vipData, isLoading: isLoadingVipData, error: vipDataError, refetch: refetchVipData } = useMonitoredReadContracts({
        contracts: [
            { ...vipStakingContract, functionName: 'userStakes', args: [address!] },
            { ...vipStakingContract, functionName: 'unstakeQueue', args: [address!] },
            { ...soulShardContract, functionName: 'allowance', args: [address!, vipStakingContract?.address as `0x${string}`] },
            { ...vipStakingContract, functionName: 'getVipLevel', args: [address!] },
            { ...vipStakingContract, functionName: 'getVipTaxReduction', args: [address!] },
            { ...vipStakingContract, functionName: 'unstakeCooldown' }, // Ê∑ªÂä†ÂÜ∑ÂçªÊúüËÆÄÂèñ
        ],
        contractName: 'vipStaking',
        batchName: 'vipStatusBatch',
        query: { 
            enabled: !!address && !!vipStakingContract && !!soulShardContract && !!vipStakingContract?.address && isSupportedChain,
            // üîÑ VIP Êï∏ÊìöÂø´ÂèñÈÖçÁΩÆ
            staleTime: 1000 * 60 * 10, // 10ÂàÜÈêò - VIP ÁãÄÊÖãËÆäÊõ¥‰∏çÈ†ªÁπÅ
            gcTime: 1000 * 60 * 30,    // 30ÂàÜÈêò
            refetchOnWindowFocus: false, // ÈÅøÂÖçÂàáÊèõË¶ñÁ™óÊôÇÈáçÊñ∞Ë´ãÊ±Ç
            retry: 3,
            retryDelay: (attemptIndex) => Math.min(3000 * 2 ** attemptIndex, 30000), // Êõ¥ÊÖ¢ÁöÑÈáçË©¶Ôºö3Áßí„ÄÅ6Áßí„ÄÅ12ÁßíÔºåÊúÄÂ§ö30Áßí
            throwOnError: false, // Èò≤Ê≠¢ÈåØË™§Â∞éËá¥È†ÅÈù¢Â¥©ÊΩ∞
        }
    });

    const [
        stakeInfo,
        unstakeQueue,
        allowance,
        contractVipLevel,
        contractTaxReduction,
        cooldownPeriod
    ] = useMemo(() => {
        if (!vipData || !Array.isArray(vipData)) {
            return [undefined, undefined, undefined, undefined, undefined, undefined];
        }
        return vipData.map(d => d?.result);
    }, [vipData]);

    const stakedAmount = useMemo(() => (stakeInfo as readonly [bigint, bigint])?.[0] ?? 0n, [stakeInfo]);
    const tokenId = useMemo(() => (stakeInfo as readonly [bigint, bigint])?.[1], [stakeInfo]);
    
    // ‚òÖ Ê†∏ÂøÉ‰øÆÊ≠£ #2: ‰ΩøÁî®ÂêàÁ¥ÑÊñπÊ≥ïÁç≤ÂèñVIPÁ≠âÁ¥öÂíåÁ®ÖÁéáÊ∏õÂÖç
    const { vipLevel, taxReduction } = useMemo(() => {
        // ÂÑ™ÂÖà‰ΩøÁî®ÂêàÁ¥ÑËøîÂõûÁöÑÊï∏Êìö
        if (contractVipLevel !== undefined && contractTaxReduction !== undefined) {
            const level = Number(contractVipLevel);
            const reduction = BigInt(contractTaxReduction);

            return { vipLevel: level, taxReduction: reduction };
        }
        
        // Â¶ÇÊûúÂêàÁ¥ÑÊï∏Êìö‰∏çÂèØÁî®Ôºåfallback Âà∞ÂâçÁ´ØË®àÁÆóÔºà‰ΩøÁî®Âπ≥ÊñπÊ†πÊñπÂºèÔºâ
        if (!stakedAmount || stakedAmount === 0n) {
            return { vipLevel: 0, taxReduction: 0n };
        }
        
        // ÂÅáË®≠ stakedValueUSDÔºàÈÄôË£°ÈúÄË¶ÅÂæû Oracle Áç≤ÂèñÔºåÊö´ÊôÇÁî®‰º∞ÁÆóÔºâ
        const amountInEther = Number(stakedAmount) / 1e18;
        // Âü∫Êñº‰Ω†Êèê‰æõÁöÑÊï∏ÊìöÔºö6,314,607 SoulShard ‚âà $371.62 USD
        // Ë®àÁÆóÔºö$371.62 / 6,314,607 ‚âà $0.0000588 per SoulShard
        const estimatedUSD = amountInEther * 0.0000588;

        let level = 0;
        
        if (estimatedUSD >= 100) {
            // ‰ΩøÁî®Âπ≥ÊñπÊ†πË®àÁÆóÔºölevel = sqrt(USD / 100)
            level = Math.floor(Math.sqrt(estimatedUSD / 100));
            // ÈôêÂà∂ÊúÄÂ§ßÁ≠âÁ¥ö
            level = Math.min(level, 255);
        }
        
        const reduction = level * 50; // 50 BP per level

        return { vipLevel: level, taxReduction: BigInt(reduction) };
    }, [contractVipLevel, contractTaxReduction, stakedAmount]);

    // ‚òÖ Ê†∏ÂøÉ‰øÆÊ≠£ #2: Á¢∫‰øùÂç≥‰Ωø stakedAmount ÁÇ∫ 0Ôºå‰πüËÉΩÂÆâÂÖ®Âú∞Ëß∏ÁôºÂæåÁ∫åÊü•Ë©¢
    const { data: stakedValueUSD, isLoading: isLoadingStakedValueUSD, refetch: refetchStakedValueUSD } = useReadContract({
        ...oracleContract,
        functionName: 'getAmountOut',
        args: [soulShardContract?.address as `0x${string}`, stakedAmount],
        query: { 
            enabled: !!oracleContract && !!soulShardContract && (stakedAmount > 0n),
            // üîÑ Oracle ÂÉπÊ†ºÊü•Ë©¢Âø´ÂèñÈÖçÁΩÆ
            staleTime: 1000 * 60 * 5, // 5ÂàÜÈêò - ÂÉπÊ†ºÊï∏ÊìöÈúÄË¶ÅËºÉÊñ∞
            gcTime: 1000 * 60 * 15,   // 15ÂàÜÈêò
            refetchOnWindowFocus: false,
            retry: 2,
        }
    });

    const pendingUnstakeAmount = useMemo(() => (unstakeQueue as readonly [bigint, bigint])?.[0] ?? 0n, [unstakeQueue]);
    const unstakeAvailableAt = useMemo(() => Number((unstakeQueue as readonly [bigint, bigint])?.[1] ?? 0n), [unstakeQueue]);

    const { isOver: isCooldownOver, formatted: countdown } = useCountdown(unstakeAvailableAt);

    // ‚òÖ Ê†∏ÂøÉ‰øÆÊ≠£ #3: Ê∑ªÂä†ÈåØË™§ËôïÁêÜÂíåË™øË©¶‰ø°ÊÅØ
    useEffect(() => {
        if (vipDataError) {
            logger.error('üö® VIPÊï∏ÊìöËÆÄÂèñÈåØË™§:', vipDataError);
        }
        if (vipData) {
            logger.debug('üéØ VIPÁãÄÊÖãÊï∏Êìö:', {
                address,
                stakedAmount: stakedAmount.toString(),
                contractVipLevel: contractVipLevel?.toString(),
                contractTaxReduction: contractTaxReduction?.toString(),
                finalVipLevel: vipLevel,
                finalTaxReduction: taxReduction.toString(),
                contractAddress: vipStakingContract?.address,
                dataSource: contractVipLevel !== undefined ? 'contract' : 'fallback',
                stakedValueUSD: stakedValueUSD?.toString()
            });
        }
    }, [vipData, vipDataError, address, stakedAmount, vipLevel, taxReduction, vipStakingContract?.address, stakedValueUSD]);

    const refetchAll = async () => {
        try {

            // ‰∏¶Ë°åÂü∑Ë°åÊâÄÊúârefetchÊìç‰Ωú
            const promises = [
                refetchVipData(),
                refetchBalance(),
            ];
            
            await Promise.all(promises);
            
            // ÂñÆÁç®ËôïÁêÜ stakedValueUSD ÁöÑ refetchÔºåÂõ†ÁÇ∫ÂÆÉÊúâ‰∏çÂêåÁöÑËøîÂõûÈ°ûÂûã
            if (stakedAmount > 0n) {
                await refetchStakedValueUSD();
            }

        } catch (error) {
            logger.error('‚ùå Âà∑Êñ∞VIPÁãÄÊÖãÊôÇÁôºÁîüÈåØË™§:', error);
        }
    };

    return {
        isLoading: isLoadingVipData || isLoadingBalance || (stakedAmount > 0n && isLoadingStakedValueUSD),
        error: vipDataError,
        vipStakingContract,
        soulShardContract,
        soulShardBalance: soulShardBalance?.value ?? 0n,
        stakedAmount,
        stakedValueUSD: (stakedValueUSD as bigint) ?? 0n,
        tokenId,
        vipLevel,
        taxReduction,
        pendingUnstakeAmount,
        isCooldownOver,
        countdown,
        allowance: allowance ?? 0n,
        cooldownPeriod: cooldownPeriod as bigint | undefined,
        cooldownDays: cooldownPeriod ? Number(cooldownPeriod) / 86400 : 7,
        cooldownFormatted: formatCooldownPeriod(cooldownPeriod),
        refetchAll,
        // Ë™øË©¶‰ø°ÊÅØ
        isChainSupported: isSupportedChain,
        hasContracts: !!vipStakingContract && !!soulShardContract,
        contractAddresses: {
            vipStaking: vipStakingContract?.address,
            soulShard: soulShardContract?.address
        }
    };
};
