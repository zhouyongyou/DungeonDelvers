# =================================================================
# Schema 設計藍圖 (最終修正版)
# =================================================================

type Player @entity(immutable: false) {
  " 玩家的錢包地址 "
  id: Bytes!
  " 玩家擁有的所有英雄 "
  heros: [Hero!] @derivedFrom(field: "owner")
  " 玩家擁有的所有聖物 "
  relics: [Relic!] @derivedFrom(field: "owner")
  " 玩家擁有的所有隊伍 "
  parties: [Party!] @derivedFrom(field: "owner")
  " 玩家的 VIP 卡 (SBT)，一個玩家只會有一個 "
  vip: VIP
  " 玩家的個人檔案 (SBT)，一個玩家只會有一個 "
  profile: PlayerProfile
  " 玩家的金庫 "
  vault: PlayerVault
  " 玩家的所有升星嘗試紀錄 "
  upgradeAttempts: [UpgradeAttempt!] @derivedFrom(field: "player")
  " 玩家的統計數據 "
  stats: PlayerStats @derivedFrom(field: "player")
}

type Hero @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 英雄的擁有者 "
  owner: Player!
  " 稀有度 (1-5) "
  rarity: Int!
  " 戰力 "
  power: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後升級時間戳 "
  lastUpgradedAt: BigInt
  " 是否已被銷毀 "
  isBurned: Boolean!
  " 銷毀時間戳 "
  burnedAt: BigInt
  " 升級歷史 "
  upgradeHistory: [HeroUpgrade!] @derivedFrom(field: "hero")
}

type Relic @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 聖物的擁有者 "
  owner: Player!
  " 稀有度 (1-5) "
  rarity: Int!
  " 儲備容量 "
  capacity: Int!
  " 當前儲備數量 "
  currentProvisions: Int!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後升級時間戳 "
  lastUpgradedAt: BigInt
  " 是否已被銷毀 "
  isBurned: Boolean!
  " 銷毀時間戳 "
  burnedAt: BigInt
  " 升級歷史 "
  upgradeHistory: [RelicUpgrade!] @derivedFrom(field: "relic")
}

type Party @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 隊伍的擁有者 "
  owner: Player!
  " 隊伍名稱 "
  name: String!
  " 目前配置的英雄 ID 列表 "
  heroIds: [String!]!
  " 目前配置的英雄實體列表 "
  heroes: [Hero!]!
  " 總戰力 "
  totalPower: BigInt!
  " 總容量 (基於聖物) "
  totalCapacity: BigInt!
  " 隊伍稀有度 (1-5) "
  partyRarity: Int!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 (配置英雄或改名) "
  lastUpdatedAt: BigInt
  " 是否已被銷毀 "
  isBurned: Boolean!
  " 銷毀時間戳 "
  burnedAt: BigInt
  " 成員變更歷史 "
  memberChanges: [PartyMemberChange!] @derivedFrom(field: "party")
}

type PlayerProfile @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 擁有者 "
  owner: Player!
  " 玩家設定的名稱 "
  name: String!
  " 成功的遠征次數 "
  successfulExpeditions: Int!
  " 總獲得獎勵 "
  totalRewardsEarned: BigInt!
  " 邀請人地址 "
  inviter: Bytes
  " 被邀請的玩家列表 "
  invitees: [Bytes!]!
  " 佣金獲得總額 "
  commissionEarned: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt
}

type VIP @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 擁有者 "
  owner: Player!
  " 質押的 USDT 數量 "
  stakedAmount: BigInt!
  " 開始質押時間戳 "
  stakedAt: BigInt!
  " 解鎖時間戳 (如果有冷卻期) "
  unlockTime: BigInt
  " 是否正在解鎖中 "
  isUnlocking: Boolean!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt
}

type PlayerVault @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 擁有者 "
  owner: Player!
  " 待領取的總獎勵 "
  pendingRewards: BigInt!
  " 已領取的總獎勵 "
  claimedRewards: BigInt!
  " 總儲備花費 "
  totalProvisionSpent: BigInt!
  " 最後領取時間戳 "
  lastClaimedAt: BigInt
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt
}

type UpgradeAttempt @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 執行升級的玩家 "
  player: Player!
  " 升級類型 (hero/relic) "
  type: String!
  " 被升級的目標 "
  targetId: String!
  " 被銷毀的材料 ID 列表 "
  materialIds: [String!]!
  " 被銷毀的材料實體列表 (英雄或聖物) "
  materials: [String!]!
  " 是否成功 "
  isSuccess: Boolean!
  " 新稀有度 (如果成功) "
  newRarity: Int
  " 時間戳 "
  timestamp: BigInt!
}

type GlobalStats @entity(immutable: false) {
  " 固定 ID = 'global' "
  id: String!
  " 總玩家數 "
  totalPlayers: Int!
  " 總英雄數 (包含已銷毀) "
  totalHeroes: Int!
  " 總聖物數 (包含已銷毀) "
  totalRelics: Int!
  " 總隊伍數 (包含已銷毀) "
  totalParties: Int!
  " 總升星嘗試次數 "
  totalUpgradeAttempts: Int!
  " 成功升星次數 "
  successfulUpgrades: Int!
  " 總遠征次數 "
  totalExpeditions: Int!
  " 成功遠征次數 "
  successfulExpeditions: Int!
  " 總獎勵發放 "
  totalRewardsDistributed: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
}

type PlayerStats @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 關聯的玩家 "
  player: Player!
  " 總擁有英雄數 (不含已銷毀) "
  totalHeroes: Int!
  " 總擁有聖物數 (不含已銷毀) "
  totalRelics: Int!
  " 總擁有隊伍數 (不含已銷毀) "
  totalParties: Int!
  " 總遠征次數 "
  totalExpeditions: Int!
  " 成功遠征次數 "
  successfulExpeditions: Int!
  " 總獲得獎勵 "
  totalRewardsEarned: BigInt!
  " 最高隊伍戰力 "
  highestPartyPower: BigInt!
  " 總升星嘗試次數 "
  totalUpgradeAttempts: Int!
  " 成功升星次數 "
  successfulUpgrades: Int!
  " 最後活動時間戳 "
  lastActivityAt: BigInt!
}

type HeroUpgrade @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 升級的英雄 "
  hero: Hero!
  " 執行升級的玩家 "
  owner: Player!
  " 原始稀有度 "
  oldRarity: Int!
  " 新稀有度 "
  newRarity: Int!
  " 新戰力 "
  newPower: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}

type RelicUpgrade @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 升級的聖物 "
  relic: Relic!
  " 執行升級的玩家 "
  owner: Player!
  " 原始稀有度 "
  oldRarity: Int!
  " 新稀有度 "
  newRarity: Int!
  " 新容量 "
  newCapacity: Int!
  " 時間戳 "
  timestamp: BigInt!
}

type PartyMemberChange @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 變更的隊伍 "
  party: Party!
  " 執行變更的玩家 "
  owner: Player!
  " 變更類型 (0: 添加, 1: 移除) "
  changeType: Int!
  " 相關的英雄 "
  hero: Hero!
  " 時間戳 "
  timestamp: BigInt!
}

# =================================================================
# 管理員數據實體 (新增)
# =================================================================

type AdminParameters @entity(immutable: false) {
  " 固定 ID = 'admin' "
  id: String!
  
  # 鑄造價格
  " 英雄鑄造價格 (USD) "
  heroMintPriceUSD: BigInt!
  " 聖物鑄造價格 (USD) "
  relicMintPriceUSD: BigInt!
  " 儲備購買價格 (USD) "
  provisionPriceUSD: BigInt!
  
  # 平台費用
  " 英雄平台費 (BNB) "
  heroPlatformFee: BigInt!
  " 聖物平台費 (BNB) "
  relicPlatformFee: BigInt!
  " 隊伍平台費 (BNB) "
  partyPlatformFee: BigInt!
  " 遠征探索費 (BNB) "
  explorationFee: BigInt!
  
  # 遊戲參數
  " 休息成本係數 "
  restCostPowerDivisor: BigInt!
  " VIP 取消質押冷卻時間 (秒) "
  vipUnstakeCooldown: BigInt!
  " 全域獎勵倍率 (萬分位) "
  globalRewardMultiplier: BigInt!
  
  # 稅務系統
  " 邀請佣金率 (萬分位) "
  commissionRate: BigInt!
  
  # Oracle 設定
  " TWAP 週期 (秒) "
  twapPeriod: BigInt!
  
  # 元數據
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
  " 更新者地址 "
  updatedBy: Bytes!
}

type ContractRegistry @entity(immutable: false) {
  " 固定 ID = 'contracts' "
  id: String!
  
  # 核心合約
  " DungeonCore 合約地址 "
  dungeonCore: Bytes!
  " Hero NFT 合約地址 "
  hero: Bytes!
  " Relic NFT 合約地址 "
  relic: Bytes!
  " Party NFT 合約地址 "
  party: Bytes!
  
  # 遊戲邏輯合約
  " DungeonMaster 合約地址 "
  dungeonMaster: Bytes!
  " PlayerVault 合約地址 "
  playerVault: Bytes!
  " Oracle 合約地址 "
  oracle: Bytes!
  " VipStaking 合約地址 "
  vipStaking: Bytes!
  " PlayerProfile 合約地址 "
  playerProfile: Bytes!
  " AltarOfAscension 合約地址 "
  altarOfAscension: Bytes!
  
  # 元數據
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
  " 更新者地址 "
  updatedBy: Bytes!
}

# =================================================================
# 管理員操作日誌 (用於追蹤參數變更)
# =================================================================

type AdminAction @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 操作類型 (setParameter, setContract, etc.) "
  actionType: String!
  " 目標合約 "
  targetContract: Bytes!
  " 函數名稱 "
  functionName: String!
  " 參數名稱 "
  parameterName: String!
  " 舊值 (字符串格式) "
  oldValue: String
  " 新值 (字符串格式) "
  newValue: String!
  " 執行者地址 "
  executor: Bytes!
  " 交易哈希 "
  transactionHash: Bytes!
  " 時間戳 "
  timestamp: BigInt!
}