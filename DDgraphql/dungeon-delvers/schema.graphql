# =================================================================
# Schema 設計藍圖 (最終修正版)
# =================================================================

type Player @entity(immutable: false) {
  " 玩家的錢包地址 "
  id: Bytes!
  " 玩家擁有的所有英雄 "
  heros: [Hero!] @derivedFrom(field: "owner")
  " 玩家擁有的所有聖物 "
  relics: [Relic!] @derivedFrom(field: "owner")
  " 玩家擁有的所有隊伍 "
  parties: [Party!] @derivedFrom(field: "owner")
  " 玩家的 VIP 卡 (SBT)，一個玩家只會有一個 "
  vip: VIP
  " 玩家的個人檔案 (SBT)，一個玩家只會有一個 "
  profile: PlayerProfile
  " 玩家的金庫 "
  vault: PlayerVault
  " 玩家的所有升星嘗試紀錄 "
  upgradeAttempts: [UpgradeAttempt!] @derivedFrom(field: "player")
  " 玩家的統計數據 "
  stats: PlayerStats @derivedFrom(field: "player")
}

type Hero @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 英雄的擁有者 "
  owner: Player!
  " 稀有度 (1-5) "
  rarity: Int!
  " 戰力 "
  power: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
}

type Relic @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 聖物的擁有者 "
  owner: Player!
  " 稀有度 (1-5) "
  rarity: Int!
  " 容量 (決定隊伍能帶多少英雄) "
  capacity: Int!
  " 創建時間戳 "
  createdAt: BigInt!
}

type Party @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 隊伍的擁有者 "
  owner: Player!
  " 隊伍中的英雄列表 "
  heros: [Hero!]!
  " 隊伍中的聖物列表 "
  relics: [Relic!]!
  " 總戰力 "
  totalPower: BigInt!
  " 總容量 "
  totalCapacity: BigInt!
  " 隊伍稀有度 "
  partyRarity: Int!
  " 疲勞等級 "
  fatigueLevel: Int!
  " 剩餘補給 "
  provisionsRemaining: Int!
  " 冷卻結束時間戳 "
  cooldownEndsAt: BigInt!
  " 未領取的獎勵 "
  unclaimedRewards: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
}

type PlayerProfile @entity(immutable: false) {
  " 使用玩家地址的十六進位字串作為 ID "
  id: String!
  " 關聯的玩家 "
  player: Player!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 經驗值 "
  experience: BigInt!
  " 等級 "
  level: Int!
}

type VIP @entity(immutable: false) {
  " 使用玩家地址的十六進位字串作為 ID "
  id: String!
  " 關聯的玩家 "
  player: Player!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 質押的代幣數量 "
  stakedAmount: BigInt!
  " VIP 等級 "
  level: Int!
}

type PlayerVault @entity(immutable: false) {
  " 使用玩家地址的十六進位字串作為 ID "
  id: String!
  " 關聯的玩家 "
  player: Player!
  " 存入的總金額 "
  totalDeposited: BigInt!
  " 提出的總金額 "
  totalWithdrawn: BigInt!
  " 目前餘額 "
  balance: BigInt!
}

type UpgradeAttempt @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 執行升星的玩家 "
  player: Player!
  " 升星使用的代幣合約 "
  tokenContract: Bytes!
  " 升星目標的稀有度 "
  targetRarity: Int!
  " 升星結果 (0: 失敗, 1: 部分返還, 2: 成功, 3: 大成功) "
  outcome: Int!
  " 時間戳 "
  timestamp: BigInt!
}

type GlobalStats @entity(immutable: false) {
  " 固定ID為 'global' "
  id: String!
  " 總英雄數量 "
  totalHeroes: BigInt!
  " 總聖物數量 "
  totalRelics: BigInt!
  " 總隊伍數量 "
  totalParties: BigInt!
  " 總玩家數量 "
  totalPlayers: BigInt!
  " 總升星嘗試次數 "
  totalUpgradeAttempts: BigInt!
  " 成功升星次數 "
  successfulUpgrades: BigInt!
  " 最後更新時間戳 "
  lastUpdated: BigInt!
}

type PlayerStats @entity(immutable: false) {
  " 使用玩家地址作為ID "
  id: String!
  " 關聯的玩家 "
  player: Player!
  " 總鑄造英雄數量 "
  totalHeroesMinted: Int!
  " 總鑄造聖物數量 "
  totalRelicsMinted: Int!
  " 總創建隊伍數量 "
  totalPartiesCreated: Int!
  " 總遠征次數 "
  totalExpeditions: Int!
  " 成功遠征次數 "
  successfulExpeditions: Int!
  " 總獲得獎勵 "
  totalRewardsEarned: BigInt!
  " 最高隊伍戰力 "
  highestPartyPower: BigInt!
  " 總升星嘗試次數 "
  totalUpgradeAttempts: Int!
  " 成功升星次數 "
  successfulUpgrades: Int!
  " 最後活動時間戳 "
  lastActivityAt: BigInt!
}
