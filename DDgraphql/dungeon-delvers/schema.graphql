# DDgraphql/dungeon-delvers/schema.graphql (修正後版本)

type Player @entity(immutable: true) {
  id: Bytes! # player address
  heroes: [Hero!]! @derivedFrom(field: "owner")
  relics: [Relic!]! @derivedFrom(field: "owner")
  parties: [Party!]! @derivedFrom(field: "owner")
  profile: PlayerProfile @derivedFrom(field: "player")
  vip: VIP @derivedFrom(field: "player")
  vault: PlayerVault @derivedFrom(field: "player")
  upgradeAttempts: [UpgradeAttempt!]! @derivedFrom(field: "player")
}

# --- 修正：為所有可變的實體加上 (immutable: false) ---

type Hero @entity(immutable: false) {
  id: ID! # contract address - token id
  tokenId: BigInt!
  owner: Player!
  rarity: Int!
  power: BigInt!
  party: Party
}

type Relic @entity(immutable: false) {
  id: ID! # contract address - token id
  tokenId: BigInt!
  owner: Player!
  rarity: Int!
  capacity: Int!
  party: Party
}

type Party @entity(immutable: false) {
  id: ID! # contract address - token id
  tokenId: BigInt!
  owner: Player!
  totalPower: BigInt!
  totalCapacity: BigInt!
  partyRarity: Int!
  provisionsRemaining: BigInt!
  cooldownEndsAt: BigInt!
  unclaimedRewards: BigInt!
  fatigueLevel: Int!
  heroes: [Hero!] @derivedFrom(field: "party")
  relics: [Relic!] @derivedFrom(field: "party")
}

type PlayerProfile @entity(immutable: false) {
  id: Bytes! # player address
  player: Player! # <-- 修正：新增了指向 Player 的關聯
  experience: BigInt!
  level: Int!
}

type VIP @entity(immutable: false) {
  id: Bytes! # player address
  player: Player! # <-- 修正：新增了指向 Player 的關聯
  tokenId: BigInt
  stakedAmount: BigInt!
}

type PlayerVault @entity(immutable: false) {
  id: Bytes! # player address
  player: Player! # <-- 修正：新增了指向 Player 的關聯
  withdrawableBalance: BigInt!
  totalCommissionPaid: BigInt!
  referrer: Bytes
}

type UpgradeAttempt @entity(immutable: false) {
  id: ID! # tx hash - log index
  player: Player!
  tokenContract: Bytes!
  targetRarity: Int!
  outcome: String! # e.g., "Success", "Failure"
  timestamp: BigInt!
}
