# =================================================================
# Schema 設計藍圖 (最終修正版) - V25 虛擬稅收支援 + Marketplace V2
# =================================================================

# =================================================================
# Marketplace V2 Entities
# =================================================================

type MarketListingV2 @entity(immutable: false) {
  id: ID!
  listingId: BigInt!
  seller: Bytes!
  nftType: NFTType!
  nftContract: Bytes!
  tokenId: BigInt!
  price: BigDecimal!
  acceptedTokens: [Bytes!]!
  isActive: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
  expiresAt: BigInt
  
  # Relations
  soldTransaction: MarketTransactionV2
  priceUpdates: [ListingPriceUpdateV2!]! @derivedFrom(field: "listing")
}

type MarketTransactionV2 @entity(immutable: true) {
  id: ID!
  listingId: BigInt!
  buyer: Bytes!
  seller: Bytes!
  nftType: NFTType!
  nftContract: Bytes!
  tokenId: BigInt!
  price: BigDecimal!
  paymentToken: Bytes!
  platformFee: BigDecimal!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  
  # Relations
  listing: MarketListingV2!
}

type ListingPriceUpdateV2 @entity(immutable: true) {
  id: ID!
  listingId: BigInt!
  oldPrice: BigDecimal!
  newPrice: BigDecimal!
  oldAcceptedTokens: [Bytes!]!
  newAcceptedTokens: [Bytes!]!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  
  # Relations
  listing: MarketListingV2!
}

type OfferV2 @entity(immutable: false) {
  id: ID!
  offerId: BigInt!
  offerer: Bytes!
  targetAddress: Bytes!
  nftType: NFTType!
  nftContract: Bytes!
  tokenId: BigInt!
  offerAmount: BigDecimal!
  paymentToken: Bytes!
  expirationTime: BigInt!
  message: String
  status: OfferStatus!
  createdAt: BigInt!
  updatedAt: BigInt!
  
  # Relations
  acceptedTransaction: OfferTransactionV2
}

type OfferTransactionV2 @entity(immutable: true) {
  id: ID!
  offerId: BigInt!
  offerer: Bytes!
  accepter: Bytes!
  nftType: NFTType!
  nftContract: Bytes!
  tokenId: BigInt!
  offerAmount: BigDecimal!
  paymentToken: Bytes!
  platformFee: BigDecimal!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  
  # Relations
  offer: OfferV2!
}

type MarketStatsV2 @entity(immutable: false) {
  id: ID!
  totalListings: BigInt!
  activeListings: BigInt!
  totalSales: BigInt!
  totalVolume: BigDecimal!
  totalVolumeByToken: [TokenVolume!]!
  totalOffers: BigInt!
  activeOffers: BigInt!
  platformFeesCollected: BigDecimal!
  platformFeesCollectedByToken: [TokenVolume!]!
  lastUpdated: BigInt!
}

type TokenSupport @entity(immutable: false) {
  id: ID! # token address
  tokenAddress: Bytes!
  isSupported: Boolean!
  symbol: String
  name: String
  decimals: BigInt
  addedAt: BigInt!
  updatedAt: BigInt!
}

type TokenVolume @entity(immutable: false) {
  id: ID! # token address
  tokenAddress: Bytes!
  volume: BigDecimal!
  platformFees: BigDecimal!
}

# Daily/Hourly Statistics
type DailyMarketStatsV2 @entity(immutable: true) {
  id: ID! # timestamp / 86400
  date: BigInt!
  listings: BigInt!
  sales: BigInt!
  volume: BigDecimal!
  volumeByToken: [TokenVolume!]!
  uniqueBuyers: BigInt!
  uniqueSellers: BigInt!
  offers: BigInt!
  offersAccepted: BigInt!
}

type HourlyMarketStatsV2 @entity(immutable: true) {
  id: ID! # timestamp / 3600
  hour: BigInt!
  listings: BigInt!
  sales: BigInt!
  volume: BigDecimal!
  volumeByToken: [TokenVolume!]!
  uniqueBuyers: BigInt!
  uniqueSellers: BigInt!
  offers: BigInt!
  offersAccepted: BigInt!
}

# User Statistics
type UserMarketStatsV2 @entity(immutable: false) {
  id: ID! # user address
  userAddress: Bytes!
  totalListings: BigInt!
  totalSales: BigInt!
  totalPurchases: BigInt!
  totalVolumeAsSeller: BigDecimal!
  totalVolumeAsBuyer: BigDecimal!
  totalOffersMade: BigInt!
  totalOffersReceived: BigInt!
  totalOffersAccepted: BigInt!
  firstActivityAt: BigInt!
  lastActivityAt: BigInt!
}

# NFT Statistics
type NFTMarketStatsV2 @entity(immutable: false) {
  id: ID! # nftContract-tokenId
  nftContract: Bytes!
  tokenId: BigInt!
  nftType: NFTType!
  totalListings: BigInt!
  totalSales: BigInt!
  highestSalePrice: BigDecimal
  lowestSalePrice: BigDecimal
  lastSalePrice: BigDecimal
  lastSaleToken: Bytes
  averageSalePrice: BigDecimal
  totalOffers: BigInt!
  highestOfferAmount: BigDecimal
  lastListingPrice: BigDecimal
  lastListingTokens: [Bytes!]
  firstSaleAt: BigInt
  lastSaleAt: BigInt
  lastListingAt: BigInt
}

# =================================================================
# Core Game Entities
# =================================================================

type VirtualTaxRecord @entity(immutable: true) {
  " 唯一 ID：transactionHash-logIndex "
  id: String!
  " 稅收金額 "
  amount: BigInt!
  " 區塊時間戳 "
  timestamp: BigInt!
  " 區塊號 "
  blockNumber: BigInt!
  " 交易 hash "
  transactionHash: Bytes!
}

type TaxStatistics @entity(immutable: false) {
  " 固定 ID：global "
  id: String!
  " 累積虛擬稅收總額 "
  totalVirtualTaxCollected: BigInt!
  " 稅收記錄總數 "
  totalTaxRecords: BigInt!
  " 最後更新時間 "
  lastUpdated: BigInt!
}

type Player @entity(immutable: false) {
  " 玩家的錢包地址 "
  id: Bytes!
  " 玩家擁有的所有英雄 "
  heros: [Hero!] @derivedFrom(field: "owner")
  " 玩家擁有的所有聖物 "
  relics: [Relic!] @derivedFrom(field: "owner")
  " 玩家擁有的所有隊伍 "
  parties: [Party!] @derivedFrom(field: "owner")
  " 玩家的 VIP 卡 (SBT)，一個玩家只會有一個 "
  vip: VIP
  " 玩家的個人檔案 (SBT)，一個玩家只會有一個 "
  profile: PlayerProfile
  " 玩家的金庫 "
  vault: PlayerVault
  " 玩家的所有升星嘗試紀錄 "
  upgradeAttempts: [UpgradeAttempt!] @derivedFrom(field: "player")
  " 玩家的統計數據 "
  stats: PlayerStats @derivedFrom(field: "player")
  " 玩家的所有出征紀錄 "
  expeditions: [Expedition!] @derivedFrom(field: "player")
  " 是否擁有 VIP 卡 (SBT) "
  hasVIPCard: Boolean!
  " 玩家被強制揭示的記錄 "
  forcedReveals: [ForcedRevealEvent!] @derivedFrom(field: "user")
  " 玩家被代理揭示的記錄 "
  proxyReveals: [ProxyRevealEvent!] @derivedFrom(field: "user")
}

type Hero @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 英雄的擁有者 "
  owner: Player!
  " 稀有度 (1-5) "
  rarity: Int!
  " 戰力 "
  power: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後升級時間戳 "
  lastUpgradedAt: BigInt
  " 是否已被銷毀 "
  isBurned: Boolean!
  " 銷毀時間戳 "
  burnedAt: BigInt
  " 升級歷史 "
  upgradeHistory: [HeroUpgrade!] @derivedFrom(field: "hero")
  " 是否已揭示 "
  isRevealed: Boolean!
  " 揭示時間戳 "
  revealedAt: BigInt
  " 關聯的鑄造承諾 "
  mintCommitment: MintCommitment
}

type Relic @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 聖物的擁有者 "
  owner: Player!
  " 稀有度 (1-5) "
  rarity: Int!
  " 儲備容量 "
  capacity: Int!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後升級時間戳 "
  lastUpgradedAt: BigInt
  " 是否已被銷毀 "
  isBurned: Boolean!
  " 銷毀時間戳 "
  burnedAt: BigInt
  " 升級歷史 "
  upgradeHistory: [RelicUpgrade!] @derivedFrom(field: "relic")
  " 是否已揭示 "
  isRevealed: Boolean!
  " 揭示時間戳 "
  revealedAt: BigInt
  " 關聯的鑄造承諾 "
  mintCommitment: MintCommitment
}

type Party @entity(immutable: false) {
  " 全域唯一 ID，格式為：`contractAddress-tokenId` "
  id: String!
  " NFT 的合約地址 "
  contractAddress: Bytes!
  " NFT 的 Token ID "
  tokenId: BigInt!
  " 隊伍的擁有者 "
  owner: Player!
  " 隊伍名稱 "
  name: String!
  " 目前配置的英雄 ID 列表 "
  heroIds: [String!]!
  " 目前配置的英雄實體列表 "
  heroes: [Hero!]!
  " 目前配置的聖物 ID 列表 "
  relicIds: [String!]!
  " 目前配置的聖物實體列表 "
  relics: [Relic!]!
  " 總戰力 "
  totalPower: BigInt!
  " 總容量 (基於聖物) "
  totalCapacity: BigInt!
  " 隊伍稀有度 (1-5) "
  partyRarity: Int!
  # " 疲勞等級 (0-255) - 已禁用 "
  # fatigueLevel: Int!
  " 剩餘補給品數量 "
  provisionsRemaining: Int!
  " 未領取的獎勵 (SoulShard 數量) "
  unclaimedRewards: BigInt!
  " 冷卻結束時間戳 "
  cooldownEndsAt: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 (配置英雄或改名) "
  lastUpdatedAt: BigInt
  " 是否已被銷毀 "
  isBurned: Boolean!
  " 銷毀時間戳 "
  burnedAt: BigInt
  " 成員變更歷史 "
  memberChanges: [PartyMemberChange!] @derivedFrom(field: "party")
  " 出征歷史紀錄 "
  expeditions: [Expedition!] @derivedFrom(field: "party")
}

type PlayerProfile @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 擁有者 "
  owner: Player!
  " 玩家設定的名稱 "
  name: String!
  " 玩家等級 (根據經驗值計算) "
  level: Int!
  " 總經驗值 "
  experience: BigInt!
  " 成功的遠征次數 "
  successfulExpeditions: Int!
  " 總獲得獎勵 "
  totalRewardsEarned: BigInt!
  " 邀請人地址 "
  inviter: Bytes
  " 被邀請的玩家列表 "
  invitees: [Bytes!]!
  " 佣金獲得總額 "
  commissionEarned: BigInt!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt
}

type VIP @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 擁有者 "
  owner: Player!
  " 質押的 SoulShard 數量 (注意：VIP等級由前端直接從合約讀取) "
  stakedAmount: BigInt!
  " 開始質押時間戳 "
  stakedAt: BigInt!
  " 解鎖時間戳 (如果有冷卻期) "
  unlockTime: BigInt
  " 是否正在解鎖中 "
  isUnlocking: Boolean!
  " 請求解鎖的時間戳 "
  unlockRequestedAt: BigInt
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt
  " 是否擁有 VIP 卡 (SBT) "
  hasVIPCard: Boolean!
  " 首次質押時間戳 "
  firstStakedAt: BigInt
  " VIP NFT Token ID "
  tokenId: BigInt
}

type PlayerVault @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 擁有者 "
  owner: Player!
  " 待領取的總獎勵（包含虛擬佣金） "
  pendingRewards: BigInt!
  " 已領取的總獎勵 "
  claimedRewards: BigInt!
  " 總儲備花費（包含虛擬遊戲消費） "
  totalProvisionSpent: BigInt!
  " 虛擬遊戲消費總額 "
  totalVirtualGameSpending: BigInt!
  " 虛擬佣金獲得總額 "
  totalVirtualCommissionEarned: BigInt!
  " 最後領取時間戳 "
  lastClaimedAt: BigInt
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt
}

type UpgradeAttempt @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 執行升級的玩家 "
  player: Player!
  " 升級類型 (hero/relic) "
  type: String!
  " 被升級的目標 "
  targetId: String!
  " 被銷毀的材料 ID 列表 "
  materialIds: [String!]!
  " 被銷毀的材料實體列表 (英雄或聖物) "
  materials: [String!]!
  " 是否成功 "
  isSuccess: Boolean!
  " 新稀有度 (如果成功) "
  newRarity: Int
  " 時間戳 "
  timestamp: BigInt!
  
  " V2Fixed new fields "
  baseRarity: Int!
  outcome: Int!
  fee: BigInt!
  burnedTokenIds: [BigInt!]!
  mintedTokenIds: [BigInt!]!
  
  " V5 Optimized new fields "
  vipLevel: Int
  totalVipBonus: Int
}

# =================================================================
# Withdrawal Event - 提領事件追蹤
# =================================================================
type WithdrawalEvent @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: ID!
  " 提領的玩家 "
  player: Player!
  " 提領金額 (包含稅前) "
  amount: BigInt!
  " 稅收金額 "
  taxAmount: BigInt!
  " 實際收到金額 (amount - taxAmount) "
  netAmount: BigInt!
  " 是否為免稅提領 "
  freeWithdraw: Boolean!
  " 提領時的稅率百分比 "
  taxRate: Int!
  " 交易哈希 "
  txHash: Bytes!
  " 區塊編號 "
  blockNumber: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}

type GlobalStats @entity(immutable: false) {
  " 固定 ID = 'global' "
  id: String!
  " 總玩家數 "
  totalPlayers: Int!
  " 總英雄數 (包含已銷毀) "
  totalHeroes: Int!
  " 總聖物數 (包含已銷毀) "
  totalRelics: Int!
  " 總隊伍數 (包含已銷毀) "
  totalParties: Int!
  " 總升星嘗試次數 "
  totalUpgradeAttempts: Int!
  " 成功升星次數 "
  successfulUpgrades: Int!
  " 總遠征次數 "
  totalExpeditions: Int!
  " 成功遠征次數 "
  successfulExpeditions: Int!
  " 總獎勵發放 "
  totalRewardsDistributed: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
}

type PlayerStats @entity(immutable: false) {
  " 使用錢包地址作為 ID "
  id: Bytes!
  " 關聯的玩家 "
  player: Player!
  " 總擁有英雄數 (不含已銷毀) "
  totalHeroes: Int!
  " 總擁有聖物數 (不含已銷毀) "
  totalRelics: Int!
  " 總擁有隊伍數 (不含已銷毀) "
  totalParties: Int!
  " 總遠征次數 "
  totalExpeditions: Int!
  " 成功遠征次數 "
  successfulExpeditions: Int!
  " 總獲得獎勵 "
  totalRewardsEarned: BigInt!
  " 最高隊伍戰力 "
  highestPartyPower: BigInt!
  " 總升星嘗試次數 "
  totalUpgradeAttempts: Int!
  " 成功升星次數 "
  successfulUpgrades: Int!
  " 最後活動時間戳 "
  lastActivityAt: BigInt!
}

" V2Fixed Player Upgrade Stats "
type PlayerUpgradeStats @entity(immutable: false) {
  " Player address as ID "
  id: String!
  " Total upgrade attempts "
  totalAttempts: BigInt!
  " Total NFTs burned "
  totalBurned: BigInt!
  " Total NFTs minted "
  totalMinted: BigInt!
  " Total fees spent "
  totalFeesSpent: BigInt!
  " Last updated timestamp "
  lastUpdated: BigInt!
}

" V2Fixed Global Upgrade Stats "
type GlobalUpgradeStats @entity(immutable: false) {
  " Fixed ID = 'global' "
  id: String!
  " Total upgrade attempts "
  totalAttempts: BigInt!
  " Total NFTs burned "
  totalBurned: BigInt!
  " Total NFTs minted "
  totalMinted: BigInt!
  " Total fees collected "
  totalFeesCollected: BigInt!
  " Last updated timestamp "
  lastUpdated: BigInt!
}

type HeroUpgrade @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 升級的英雄 "
  hero: Hero!
  " 執行升級的玩家 "
  owner: Player!
  " 原始稀有度 "
  oldRarity: Int!
  " 新稀有度 "
  newRarity: Int!
  " 新戰力 "
  newPower: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}

type RelicUpgrade @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 升級的聖物 "
  relic: Relic!
  " 執行升級的玩家 "
  owner: Player!
  " 原始稀有度 "
  oldRarity: Int!
  " 新稀有度 "
  newRarity: Int!
  " 新容量 "
  newCapacity: Int!
  " 時間戳 "
  timestamp: BigInt!
}

type PartyMemberChange @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 變更的隊伍 "
  party: Party!
  " 執行變更的玩家 "
  owner: Player!
  " 變更類型 (0: 添加, 1: 移除) "
  changeType: Int!
  " 相關的英雄 "
  hero: Hero!
  " 時間戳 "
  timestamp: BigInt!
}

type Expedition @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 執行遠征的玩家 "
  player: Player!
  " 參與的隊伍 "
  party: Party!
  " 目標地下城 ID "
  dungeonId: BigInt!
  " 地下城名稱 "
  dungeonName: String!
  " 地下城戰力要求 "
  dungeonPowerRequired: BigInt!
  " 隊伍戰力 "
  partyPower: BigInt!
  " 是否成功 "
  success: Boolean!
  " 獲得的獎勵 (SoulShard) "
  reward: BigInt!
  " 獲得的經驗值 "
  expGained: BigInt!
  " 時間戳 "
  timestamp: BigInt!
  " 交易哈希 "
  transactionHash: Bytes!
}

# =================================================================
# 管理員數據實體 (新增)
# =================================================================

type AdminParameters @entity(immutable: false) {
  " 固定 ID = 'admin' "
  id: String!
  
  # 鑄造價格
  " 英雄鑄造價格 (USD) "
  heroMintPriceUSD: BigInt!
  " 聖物鑄造價格 (USD) "
  relicMintPriceUSD: BigInt!
  " 儲備購買價格 (USD) "
  provisionPriceUSD: BigInt!
  
  # 平台費用
  " 英雄平台費 (BNB) "
  heroPlatformFee: BigInt!
  " 聖物平台費 (BNB) "
  relicPlatformFee: BigInt!
  " 隊伍平台費 (BNB) "
  partyPlatformFee: BigInt!
  " 遠征探索費 (BNB) "
  explorationFee: BigInt!
  
  # 遊戲參數
  " 休息成本係數 "
  restCostPowerDivisor: BigInt!
  " VIP 取消質押冷卻時間 (秒) "
  vipUnstakeCooldown: BigInt!
  " 全域獎勵倍率 (萬分位) "
  globalRewardMultiplier: BigInt!
  
  # 稅務系統
  " 邀請佣金率 (萬分位) "
  commissionRate: BigInt!
  
  # Oracle 設定
  " TWAP 週期 (秒) "
  twapPeriod: BigInt!
  
  # 元數據
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
  " 更新者地址 "
  updatedBy: Bytes!
}

type ContractRegistry @entity(immutable: false) {
  " 固定 ID = 'contracts' "
  id: String!
  
  # 核心合約
  " DungeonCore 合約地址 "
  dungeonCore: Bytes!
  " Hero NFT 合約地址 "
  hero: Bytes!
  " Relic NFT 合約地址 "
  relic: Bytes!
  " Party NFT 合約地址 "
  party: Bytes!
  
  # 遊戲邏輯合約
  " DungeonMaster 合約地址 "
  dungeonMaster: Bytes!
  " PlayerVault 合約地址 "
  playerVault: Bytes!
  " Oracle 合約地址 "
  oracle: Bytes!
  " VipStaking 合約地址 "
  vipStaking: Bytes!
  " PlayerProfile 合約地址 "
  playerProfile: Bytes!
  " AltarOfAscension 合約地址 "
  altarOfAscension: Bytes!
  
  # 元數據
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
  " 更新者地址 "
  updatedBy: Bytes!
}

# =================================================================
# 管理員操作日誌 (用於追蹤參數變更)
# =================================================================

type AdminAction @entity(immutable: true) {
  " 使用 `txHash-logIndex` 作為唯一 ID "
  id: String!
  " 操作類型 (setParameter, setContract, etc.) "
  actionType: String!
  " 目標合約 "
  targetContract: Bytes!
  " 函數名稱 "
  functionName: String!
  " 參數名稱 "
  parameterName: String!
  " 舊值 (字符串格式) "
  oldValue: String
  " 新值 (字符串格式) "
  newValue: String!
  " 執行者地址 "
  executor: Bytes!
  " 交易哈希 "
  transactionHash: Bytes!
  " 時間戳 "
  timestamp: BigInt!
}

# =================================================================
# Enums (包含 Marketplace V2)  
# =================================================================

enum NFTType {
  HERO
  RELIC
  PARTY
  VIP
}

enum OfferStatus {
  ACTIVE
  ACCEPTED
  DECLINED
  CANCELLED
  EXPIRED
}

# =================================================================
# Pausable Events - 合約暫停事件追蹤
# =================================================================
type PausableEvent @entity(immutable: true) {
  " 使用 `txHash-logIndex-contractAddress` 作為唯一 ID "
  id: ID!
  " 合約地址 "
  contractAddress: Bytes!
  " 合約名稱 "
  contractName: String!
  " 事件類型 (paused/unpaused) "
  eventType: String!
  " 執行暫停/恢復的帳戶 "
  account: Bytes!
  " 交易哈希 "
  txHash: Bytes!
  " 區塊編號 "
  blockNumber: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}

# =================================================================
# Commit-Reveal Mechanism - 鑄造承諾和揭示追蹤
# =================================================================

type MintCommitment @entity(immutable: false) {
  " 唯一 ID：user-blockNumber "
  id: ID!
  " 執行鑄造的玩家 "
  player: Player!
  " 鑄造數量 "
  quantity: BigInt!
  " 承諾區塊號 "
  blockNumber: BigInt!
  " 是否從金庫支付 "
  fromVault: Boolean!
  " 最大稀有度 "
  maxRarity: Int!
  " 支付金額 "
  payment: BigInt!
  " 是否已揭示 "
  isRevealed: Boolean!
  " 揭示時間戳 "
  revealedAt: BigInt
  " 是否為強制揭示 "
  isForcedReveal: Boolean!
  " 強制揭示執行者 "
  forcedRevealExecutor: Bytes
  " 承諾類型 (hero/relic) "
  nftType: String!
  " 合約地址 "
  contractAddress: Bytes!
  " 創建時間戳 "
  createdAt: BigInt!
  " 最後更新時間戳 "
  lastUpdatedAt: BigInt!
  " 揭示後的 NFT ID 列表 "
  revealedTokens: [String!]!
}

type RevealEvent @entity(immutable: true) {
  " 唯一 ID：txHash-logIndex "
  id: ID!
  " 揭示的 NFT ID "
  tokenId: BigInt!
  " NFT 擁有者 "
  owner: Player!
  " NFT 類型 (hero/relic) "
  nftType: String!
  " 稀有度 "
  rarity: Int!
  " 戰力或容量 "
  powerOrCapacity: BigInt!
  " 關聯的鑄造承諾 "
  mintCommitment: MintCommitment!
  " 是否為代理揭示 "
  isProxyReveal: Boolean!
  " 代理揭示執行者 "
  proxyExecutor: Bytes
  " 交易哈希 "
  transactionHash: Bytes!
  " 區塊號 "
  blockNumber: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}

type ForcedRevealEvent @entity(immutable: true) {
  " 唯一 ID：txHash-logIndex "
  id: ID!
  " 被強制揭示的用戶 "
  user: Player!
  " 執行強制揭示的地址 "
  executor: Bytes!
  " 強制揭示的 NFT 數量 "
  quantity: BigInt!
  " NFT 類型 (hero/relic) "
  nftType: String!
  " 合約地址 "
  contractAddress: Bytes!
  " 交易哈希 "
  transactionHash: Bytes!
  " 區塊號 "
  blockNumber: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}

type ProxyRevealEvent @entity(immutable: true) {
  " 唯一 ID：txHash-logIndex "
  id: ID!
  " 被代理揭示的用戶 "
  user: Player!
  " 代理執行者 "
  proxy: Bytes!
  " NFT 類型 (hero/relic) "
  nftType: String!
  " 合約地址 "
  contractAddress: Bytes!
  " 交易哈希 "
  transactionHash: Bytes!
  " 區塊號 "
  blockNumber: BigInt!
  " 時間戳 "
  timestamp: BigInt!
}