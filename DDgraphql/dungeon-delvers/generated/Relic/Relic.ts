// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AscensionAltarSet extends ethereum.Event {
  get params(): AscensionAltarSet__Params {
    return new AscensionAltarSet__Params(this);
  }
}

export class AscensionAltarSet__Params {
  _event: AscensionAltarSet;

  constructor(event: AscensionAltarSet) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ContractsSet extends ethereum.Event {
  get params(): ContractsSet__Params {
    return new ContractsSet__Params(this);
  }
}

export class ContractsSet__Params {
  _event: ContractsSet;

  constructor(event: ContractsSet) {
    this._event = event;
  }

  get core(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DungeonSvgLibrarySet extends ethereum.Event {
  get params(): DungeonSvgLibrarySet__Params {
    return new DungeonSvgLibrarySet__Params(this);
  }
}

export class DungeonSvgLibrarySet__Params {
  _event: DungeonSvgLibrarySet;

  constructor(event: DungeonSvgLibrarySet) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DynamicSeedUpdated extends ethereum.Event {
  get params(): DynamicSeedUpdated__Params {
    return new DynamicSeedUpdated__Params(this);
  }
}

export class DynamicSeedUpdated__Params {
  _event: DynamicSeedUpdated;

  constructor(event: DynamicSeedUpdated) {
    this._event = event;
  }

  get newSeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RelicMinted extends ethereum.Event {
  get params(): RelicMinted__Params {
    return new RelicMinted__Params(this);
  }
}

export class RelicMinted__Params {
  _event: RelicMinted;

  constructor(event: RelicMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rarity(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get capacity(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Relic__getRelicPropertiesResultValue0Struct extends ethereum.Tuple {
  get rarity(): i32 {
    return this[0].toI32();
  }

  get capacity(): i32 {
    return this[1].toI32();
  }
}

export class Relic__relicDataResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getRarity(): i32 {
    return this.value0;
  }

  getCapacity(): i32 {
    return this.value1;
  }
}

export class Relic extends ethereum.SmartContract {
  static bind(address: Address): Relic {
    return new Relic("Relic", address);
  }

  ascensionAltarAddress(): Address {
    let result = super.call(
      "ascensionAltarAddress",
      "ascensionAltarAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ascensionAltarAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ascensionAltarAddress",
      "ascensionAltarAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dungeonCore(): Address {
    let result = super.call("dungeonCore", "dungeonCore():(address)", []);

    return result[0].toAddress();
  }

  try_dungeonCore(): ethereum.CallResult<Address> {
    let result = super.tryCall("dungeonCore", "dungeonCore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dungeonSvgLibrary(): Address {
    let result = super.call(
      "dungeonSvgLibrary",
      "dungeonSvgLibrary():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_dungeonSvgLibrary(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dungeonSvgLibrary",
      "dungeonSvgLibrary():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dynamicSeed(): BigInt {
    let result = super.call("dynamicSeed", "dynamicSeed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dynamicSeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dynamicSeed", "dynamicSeed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRelicProperties(
    tokenId: BigInt,
  ): Relic__getRelicPropertiesResultValue0Struct {
    let result = super.call(
      "getRelicProperties",
      "getRelicProperties(uint256):((uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return changetype<Relic__getRelicPropertiesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRelicProperties(
    tokenId: BigInt,
  ): ethereum.CallResult<Relic__getRelicPropertiesResultValue0Struct> {
    let result = super.tryCall(
      "getRelicProperties",
      "getRelicProperties(uint256):((uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Relic__getRelicPropertiesResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getRequiredSoulShardAmount(_quantity: BigInt): BigInt {
    let result = super.call(
      "getRequiredSoulShardAmount",
      "getRequiredSoulShardAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_quantity)],
    );

    return result[0].toBigInt();
  }

  try_getRequiredSoulShardAmount(
    _quantity: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequiredSoulShardAmount",
      "getRequiredSoulShardAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_quantity)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintFromAltar(_to: Address, _rarity: i32, _randomNumber: BigInt): BigInt {
    let result = super.call(
      "mintFromAltar",
      "mintFromAltar(address,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_rarity)),
        ethereum.Value.fromUnsignedBigInt(_randomNumber),
      ],
    );

    return result[0].toBigInt();
  }

  try_mintFromAltar(
    _to: Address,
    _rarity: i32,
    _randomNumber: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintFromAltar",
      "mintFromAltar(address,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_rarity)),
        ethereum.Value.fromUnsignedBigInt(_randomNumber),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintPriceUSD(): BigInt {
    let result = super.call("mintPriceUSD", "mintPriceUSD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintPriceUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPriceUSD", "mintPriceUSD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relicData(param0: BigInt): Relic__relicDataResult {
    let result = super.call("relicData", "relicData(uint256):(uint8,uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return new Relic__relicDataResult(result[0].toI32(), result[1].toI32());
  }

  try_relicData(param0: BigInt): ethereum.CallResult<Relic__relicDataResult> {
    let result = super.tryCall(
      "relicData",
      "relicData(uint256):(uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Relic__relicDataResult(value[0].toI32(), value[1].toI32()),
    );
  }

  soulShardToken(): Address {
    let result = super.call("soulShardToken", "soulShardToken():(address)", []);

    return result[0].toAddress();
  }

  try_soulShardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "soulShardToken",
      "soulShardToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnFromAltarCall extends ethereum.Call {
  get inputs(): BurnFromAltarCall__Inputs {
    return new BurnFromAltarCall__Inputs(this);
  }

  get outputs(): BurnFromAltarCall__Outputs {
    return new BurnFromAltarCall__Outputs(this);
  }
}

export class BurnFromAltarCall__Inputs {
  _call: BurnFromAltarCall;

  constructor(call: BurnFromAltarCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnFromAltarCall__Outputs {
  _call: BurnFromAltarCall;

  constructor(call: BurnFromAltarCall) {
    this._call = call;
  }
}

export class MintFromAltarCall extends ethereum.Call {
  get inputs(): MintFromAltarCall__Inputs {
    return new MintFromAltarCall__Inputs(this);
  }

  get outputs(): MintFromAltarCall__Outputs {
    return new MintFromAltarCall__Outputs(this);
  }
}

export class MintFromAltarCall__Inputs {
  _call: MintFromAltarCall;

  constructor(call: MintFromAltarCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rarity(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _randomNumber(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintFromAltarCall__Outputs {
  _call: MintFromAltarCall;

  constructor(call: MintFromAltarCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintFromVaultCall extends ethereum.Call {
  get inputs(): MintFromVaultCall__Inputs {
    return new MintFromVaultCall__Inputs(this);
  }

  get outputs(): MintFromVaultCall__Outputs {
    return new MintFromVaultCall__Outputs(this);
  }
}

export class MintFromVaultCall__Inputs {
  _call: MintFromVaultCall;

  constructor(call: MintFromVaultCall) {
    this._call = call;
  }

  get _quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintFromVaultCall__Outputs {
  _call: MintFromVaultCall;

  constructor(call: MintFromVaultCall) {
    this._call = call;
  }
}

export class MintFromWalletCall extends ethereum.Call {
  get inputs(): MintFromWalletCall__Inputs {
    return new MintFromWalletCall__Inputs(this);
  }

  get outputs(): MintFromWalletCall__Outputs {
    return new MintFromWalletCall__Outputs(this);
  }
}

export class MintFromWalletCall__Inputs {
  _call: MintFromWalletCall;

  constructor(call: MintFromWalletCall) {
    this._call = call;
  }

  get _quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintFromWalletCall__Outputs {
  _call: MintFromWalletCall;

  constructor(call: MintFromWalletCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetAscensionAltarAddressCall extends ethereum.Call {
  get inputs(): SetAscensionAltarAddressCall__Inputs {
    return new SetAscensionAltarAddressCall__Inputs(this);
  }

  get outputs(): SetAscensionAltarAddressCall__Outputs {
    return new SetAscensionAltarAddressCall__Outputs(this);
  }
}

export class SetAscensionAltarAddressCall__Inputs {
  _call: SetAscensionAltarAddressCall;

  constructor(call: SetAscensionAltarAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAscensionAltarAddressCall__Outputs {
  _call: SetAscensionAltarAddressCall;

  constructor(call: SetAscensionAltarAddressCall) {
    this._call = call;
  }
}

export class SetDungeonCoreCall extends ethereum.Call {
  get inputs(): SetDungeonCoreCall__Inputs {
    return new SetDungeonCoreCall__Inputs(this);
  }

  get outputs(): SetDungeonCoreCall__Outputs {
    return new SetDungeonCoreCall__Outputs(this);
  }
}

export class SetDungeonCoreCall__Inputs {
  _call: SetDungeonCoreCall;

  constructor(call: SetDungeonCoreCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDungeonCoreCall__Outputs {
  _call: SetDungeonCoreCall;

  constructor(call: SetDungeonCoreCall) {
    this._call = call;
  }
}

export class SetDungeonSvgLibraryCall extends ethereum.Call {
  get inputs(): SetDungeonSvgLibraryCall__Inputs {
    return new SetDungeonSvgLibraryCall__Inputs(this);
  }

  get outputs(): SetDungeonSvgLibraryCall__Outputs {
    return new SetDungeonSvgLibraryCall__Outputs(this);
  }
}

export class SetDungeonSvgLibraryCall__Inputs {
  _call: SetDungeonSvgLibraryCall;

  constructor(call: SetDungeonSvgLibraryCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDungeonSvgLibraryCall__Outputs {
  _call: SetDungeonSvgLibraryCall;

  constructor(call: SetDungeonSvgLibraryCall) {
    this._call = call;
  }
}

export class SetMintPriceUSDCall extends ethereum.Call {
  get inputs(): SetMintPriceUSDCall__Inputs {
    return new SetMintPriceUSDCall__Inputs(this);
  }

  get outputs(): SetMintPriceUSDCall__Outputs {
    return new SetMintPriceUSDCall__Outputs(this);
  }
}

export class SetMintPriceUSDCall__Inputs {
  _call: SetMintPriceUSDCall;

  constructor(call: SetMintPriceUSDCall) {
    this._call = call;
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintPriceUSDCall__Outputs {
  _call: SetMintPriceUSDCall;

  constructor(call: SetMintPriceUSDCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get _newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class SetSoulShardTokenCall extends ethereum.Call {
  get inputs(): SetSoulShardTokenCall__Inputs {
    return new SetSoulShardTokenCall__Inputs(this);
  }

  get outputs(): SetSoulShardTokenCall__Outputs {
    return new SetSoulShardTokenCall__Outputs(this);
  }
}

export class SetSoulShardTokenCall__Inputs {
  _call: SetSoulShardTokenCall;

  constructor(call: SetSoulShardTokenCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSoulShardTokenCall__Outputs {
  _call: SetSoulShardTokenCall;

  constructor(call: SetSoulShardTokenCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawNativeFundingCall extends ethereum.Call {
  get inputs(): WithdrawNativeFundingCall__Inputs {
    return new WithdrawNativeFundingCall__Inputs(this);
  }

  get outputs(): WithdrawNativeFundingCall__Outputs {
    return new WithdrawNativeFundingCall__Outputs(this);
  }
}

export class WithdrawNativeFundingCall__Inputs {
  _call: WithdrawNativeFundingCall;

  constructor(call: WithdrawNativeFundingCall) {
    this._call = call;
  }
}

export class WithdrawNativeFundingCall__Outputs {
  _call: WithdrawNativeFundingCall;

  constructor(call: WithdrawNativeFundingCall) {
    this._call = call;
  }
}

export class WithdrawSoulShardCall extends ethereum.Call {
  get inputs(): WithdrawSoulShardCall__Inputs {
    return new WithdrawSoulShardCall__Inputs(this);
  }

  get outputs(): WithdrawSoulShardCall__Outputs {
    return new WithdrawSoulShardCall__Outputs(this);
  }
}

export class WithdrawSoulShardCall__Inputs {
  _call: WithdrawSoulShardCall;

  constructor(call: WithdrawSoulShardCall) {
    this._call = call;
  }
}

export class WithdrawSoulShardCall__Outputs {
  _call: WithdrawSoulShardCall;

  constructor(call: WithdrawSoulShardCall) {
    this._call = call;
  }
}
