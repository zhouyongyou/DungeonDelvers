// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DungeonCoreSet extends ethereum.Event {
  get params(): DungeonCoreSet__Params {
    return new DungeonCoreSet__Params(this);
  }
}

export class DungeonCoreSet__Params {
  _event: DungeonCoreSet;

  constructor(event: DungeonCoreSet) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SoulShardTokenSet extends ethereum.Event {
  get params(): SoulShardTokenSet__Params {
    return new SoulShardTokenSet__Params(this);
  }
}

export class SoulShardTokenSet__Params {
  _event: SoulShardTokenSet;

  constructor(event: SoulShardTokenSet) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnstakeClaimed extends ethereum.Event {
  get params(): UnstakeClaimed__Params {
    return new UnstakeClaimed__Params(this);
  }
}

export class UnstakeClaimed__Params {
  _event: UnstakeClaimed;

  constructor(event: UnstakeClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UnstakeRequested extends ethereum.Event {
  get params(): UnstakeRequested__Params {
    return new UnstakeRequested__Params(this);
  }
}

export class UnstakeRequested__Params {
  _event: UnstakeRequested;

  constructor(event: UnstakeRequested) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get availableAt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VIPSVGLibrarySet extends ethereum.Event {
  get params(): VIPSVGLibrarySet__Params {
    return new VIPSVGLibrarySet__Params(this);
  }
}

export class VIPSVGLibrarySet__Params {
  _event: VIPSVGLibrarySet;

  constructor(event: VIPSVGLibrarySet) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VIPStaking__unstakeQueueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getAvailableAt(): BigInt {
    return this.value1;
  }
}

export class VIPStaking__userStakesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }
}

export class VIPStaking extends ethereum.SmartContract {
  static bind(address: Address): VIPStaking {
    return new VIPStaking("VIPStaking", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dungeonCore(): Address {
    let result = super.call("dungeonCore", "dungeonCore():(address)", []);

    return result[0].toAddress();
  }

  try_dungeonCore(): ethereum.CallResult<Address> {
    let result = super.tryCall("dungeonCore", "dungeonCore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVipLevel(_user: Address): i32 {
    let result = super.call("getVipLevel", "getVipLevel(address):(uint8)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toI32();
  }

  try_getVipLevel(_user: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("getVipLevel", "getVipLevel(address):(uint8)", [
      ethereum.Value.fromAddress(_user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getVipTaxReduction(_user: Address): BigInt {
    let result = super.call(
      "getVipTaxReduction",
      "getVipTaxReduction(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getVipTaxReduction(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVipTaxReduction",
      "getVipTaxReduction(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  soulShardToken(): Address {
    let result = super.call("soulShardToken", "soulShardToken():(address)", []);

    return result[0].toAddress();
  }

  try_soulShardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "soulShardToken",
      "soulShardToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalPendingUnstakes(): BigInt {
    let result = super.call(
      "totalPendingUnstakes",
      "totalPendingUnstakes():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalPendingUnstakes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPendingUnstakes",
      "totalPendingUnstakes():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakeCooldown(): BigInt {
    let result = super.call(
      "unstakeCooldown",
      "unstakeCooldown():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_unstakeCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeCooldown",
      "unstakeCooldown():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakeQueue(param0: Address): VIPStaking__unstakeQueueResult {
    let result = super.call(
      "unstakeQueue",
      "unstakeQueue(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new VIPStaking__unstakeQueueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_unstakeQueue(
    param0: Address,
  ): ethereum.CallResult<VIPStaking__unstakeQueueResult> {
    let result = super.tryCall(
      "unstakeQueue",
      "unstakeQueue(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VIPStaking__unstakeQueueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  userStakes(param0: Address): VIPStaking__userStakesResult {
    let result = super.call(
      "userStakes",
      "userStakes(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new VIPStaking__userStakesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_userStakes(
    param0: Address,
  ): ethereum.CallResult<VIPStaking__userStakesResult> {
    let result = super.tryCall(
      "userStakes",
      "userStakes(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VIPStaking__userStakesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  vipSvgLibrary(): Address {
    let result = super.call("vipSvgLibrary", "vipSvgLibrary():(address)", []);

    return result[0].toAddress();
  }

  try_vipSvgLibrary(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vipSvgLibrary",
      "vipSvgLibrary():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimUnstakedCall extends ethereum.Call {
  get inputs(): ClaimUnstakedCall__Inputs {
    return new ClaimUnstakedCall__Inputs(this);
  }

  get outputs(): ClaimUnstakedCall__Outputs {
    return new ClaimUnstakedCall__Outputs(this);
  }
}

export class ClaimUnstakedCall__Inputs {
  _call: ClaimUnstakedCall;

  constructor(call: ClaimUnstakedCall) {
    this._call = call;
  }
}

export class ClaimUnstakedCall__Outputs {
  _call: ClaimUnstakedCall;

  constructor(call: ClaimUnstakedCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestUnstakeCall extends ethereum.Call {
  get inputs(): RequestUnstakeCall__Inputs {
    return new RequestUnstakeCall__Inputs(this);
  }

  get outputs(): RequestUnstakeCall__Outputs {
    return new RequestUnstakeCall__Outputs(this);
  }
}

export class RequestUnstakeCall__Inputs {
  _call: RequestUnstakeCall;

  constructor(call: RequestUnstakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestUnstakeCall__Outputs {
  _call: RequestUnstakeCall;

  constructor(call: RequestUnstakeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetDungeonCoreCall extends ethereum.Call {
  get inputs(): SetDungeonCoreCall__Inputs {
    return new SetDungeonCoreCall__Inputs(this);
  }

  get outputs(): SetDungeonCoreCall__Outputs {
    return new SetDungeonCoreCall__Outputs(this);
  }
}

export class SetDungeonCoreCall__Inputs {
  _call: SetDungeonCoreCall;

  constructor(call: SetDungeonCoreCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDungeonCoreCall__Outputs {
  _call: SetDungeonCoreCall;

  constructor(call: SetDungeonCoreCall) {
    this._call = call;
  }
}

export class SetSoulShardTokenCall extends ethereum.Call {
  get inputs(): SetSoulShardTokenCall__Inputs {
    return new SetSoulShardTokenCall__Inputs(this);
  }

  get outputs(): SetSoulShardTokenCall__Outputs {
    return new SetSoulShardTokenCall__Outputs(this);
  }
}

export class SetSoulShardTokenCall__Inputs {
  _call: SetSoulShardTokenCall;

  constructor(call: SetSoulShardTokenCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSoulShardTokenCall__Outputs {
  _call: SetSoulShardTokenCall;

  constructor(call: SetSoulShardTokenCall) {
    this._call = call;
  }
}

export class SetUnstakeCooldownCall extends ethereum.Call {
  get inputs(): SetUnstakeCooldownCall__Inputs {
    return new SetUnstakeCooldownCall__Inputs(this);
  }

  get outputs(): SetUnstakeCooldownCall__Outputs {
    return new SetUnstakeCooldownCall__Outputs(this);
  }
}

export class SetUnstakeCooldownCall__Inputs {
  _call: SetUnstakeCooldownCall;

  constructor(call: SetUnstakeCooldownCall) {
    this._call = call;
  }

  get _newCooldown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUnstakeCooldownCall__Outputs {
  _call: SetUnstakeCooldownCall;

  constructor(call: SetUnstakeCooldownCall) {
    this._call = call;
  }
}

export class SetVipSvgLibraryCall extends ethereum.Call {
  get inputs(): SetVipSvgLibraryCall__Inputs {
    return new SetVipSvgLibraryCall__Inputs(this);
  }

  get outputs(): SetVipSvgLibraryCall__Outputs {
    return new SetVipSvgLibraryCall__Outputs(this);
  }
}

export class SetVipSvgLibraryCall__Inputs {
  _call: SetVipSvgLibraryCall;

  constructor(call: SetVipSvgLibraryCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVipSvgLibraryCall__Outputs {
  _call: SetVipSvgLibraryCall;

  constructor(call: SetVipSvgLibraryCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawStakedTokensCall extends ethereum.Call {
  get inputs(): WithdrawStakedTokensCall__Inputs {
    return new WithdrawStakedTokensCall__Inputs(this);
  }

  get outputs(): WithdrawStakedTokensCall__Outputs {
    return new WithdrawStakedTokensCall__Outputs(this);
  }
}

export class WithdrawStakedTokensCall__Inputs {
  _call: WithdrawStakedTokensCall;

  constructor(call: WithdrawStakedTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawStakedTokensCall__Outputs {
  _call: WithdrawStakedTokensCall;

  constructor(call: WithdrawStakedTokensCall) {
    this._call = call;
  }
}
